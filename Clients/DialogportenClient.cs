// <auto-generated>
//     This code was generated by Refitter.
// </auto-generated>

using Refit;
using System.Collections.Generic;
using System.Text.Json.Serialization;
using System.Threading;
using System.Threading.Tasks;

#nullable enable
namespace Digdir.BDB.Dialogporten.ServiceProvider.Clients
{
    [System.CodeDom.Compiler.GeneratedCode("Refitter", "1.2.0.0")]
    public partial interface IDialogporten
    {
        /// <summary>Gets a list of dialog transmissions</summary>
        /// <remarks>Gets the list of transmissions belonging to a dialog</remarks>
        /// <returns>
        /// A <see cref="Task"/> representing the <see cref="IApiResponse"/> instance containing the result:
        /// <list type="table">
        /// <listheader>
        /// <term>Status</term>
        /// <description>Description</description>
        /// </listheader>
        /// <item>
        /// <term>200</term>
        /// <description>Successfully returned the dialog transmission list.</description>
        /// </item>
        /// <item>
        /// <term>401</term>
        /// <description>Missing or invalid authentication token. Requires a Maskinporten-token with the scope \"digdir:dialogporten.serviceprovider\".</description>
        /// </item>
        /// <item>
        /// <term>403</term>
        /// <description>Unauthorized to get the supplied dialog (not owned by authenticated organization or has additional scope requirements defined in policy).</description>
        /// </item>
        /// </list>
        /// </returns>
        [Headers("Accept: text/plain, application/json")]
        [Get("/api/v1/serviceowner/dialogs/{dialogId}/transmissions")]
        Task<IApiResponse<object>> GetDialogTransmissionListSO(System.Guid dialogId, CancellationToken cancellationToken = default);

        /// <summary>Adds a transmission to a dialog</summary>
        /// <remarks>
        /// The transmission is created with the given configuration. For more information see the documentation (link TBD).
        /// 
        /// Optimistic concurrency control is implemented using the If-Match header. Supply the Revision value from the GetDialog endpoint to ensure that the dialog is not modified/deleted by another request in the meantime.
        /// </remarks>
        /// <returns>
        /// A <see cref="Task"/> representing the <see cref="IApiResponse"/> instance containing the result:
        /// <list type="table">
        /// <listheader>
        /// <term>Status</term>
        /// <description>Description</description>
        /// </listheader>
        /// <item>
        /// <term>401</term>
        /// <description>Missing or invalid authentication token. Requires a Maskinporten-token with the scope \"digdir:dialogporten.serviceprovider\".</description>
        /// </item>
        /// <item>
        /// <term>403</term>
        /// <description>Unauthorized to create child entity for the given dialog (dialog not owned by authenticated organization or has additional scope requirements defined in service identifiers policy).</description>
        /// </item>
        /// <item>
        /// <term>201</term>
        /// <description>The UUID of the created the dialog transmission. A relative URL to the newly created activity is set in the \"Location\" header.</description>
        /// </item>
        /// <item>
        /// <term>400</term>
        /// <description>Validation error occured. See problem details for a list of errors.</description>
        /// </item>
        /// <item>
        /// <term>404</term>
        /// <description>The given dialog ID was not found or is already deleted.</description>
        /// </item>
        /// <item>
        /// <term>412</term>
        /// <description>The supplied If-Match header did not match the current Revision value for the dialog. The request was not applied.</description>
        /// </item>
        /// <item>
        /// <term>422</term>
        /// <description>Domain error occured. See problem details for a list of errors.</description>
        /// </item>
        /// </list>
        /// </returns>
        [Headers("Accept: application/json, application/problem+json")]
        [Post("/api/v1/serviceowner/dialogs/{dialogId}/transmissions")]
        Task<IApiResponse<string>> CreateDialogTransmission(System.Guid dialogId, [Body, AliasAs("CreateDialogTransmissionRequest")] CreateDialogTransmissionRequest createDialogTransmissionRequest, [Header("if-Match")] System.Guid? if_Match, CancellationToken cancellationToken = default);

        /// <summary>Gets a single dialog transmission</summary>
        /// <remarks>Gets a single transmission belonging to a dialog. For more information see the documentation (link TBD).</remarks>
        /// <returns>
        /// A <see cref="Task"/> representing the <see cref="IApiResponse"/> instance containing the result:
        /// <list type="table">
        /// <listheader>
        /// <term>Status</term>
        /// <description>Description</description>
        /// </listheader>
        /// <item>
        /// <term>401</term>
        /// <description>Missing or invalid authentication token. Requires a Maskinporten-token with the scope \"digdir:dialogporten.serviceprovider\".</description>
        /// </item>
        /// <item>
        /// <term>403</term>
        /// <description>Unauthorized to get child entity for the given dialog (dialog not owned by authenticated organization or has additional scope requirements defined in service identifiers policy).</description>
        /// </item>
        /// <item>
        /// <term>200</term>
        /// <description>Successfully returned the dialog transmission.</description>
        /// </item>
        /// <item>
        /// <term>404</term>
        /// <description>The given dialog ID was not found or was deleted, or the given transmission ID was not found.</description>
        /// </item>
        /// </list>
        /// </returns>
        [Headers("Accept: application/problem+json")]
        [Get("/api/v1/serviceowner/dialogs/{dialogId}/transmissions/{transmissionId}")]
        Task<IApiResponse> GetDialogTransmissionSO(System.Guid dialogId, System.Guid transmissionId, CancellationToken cancellationToken = default);

        /// <summary>Gets all seen log records for a dialog</summary>
        /// <remarks>Gets all seen log records for a dialog. For more information see the documentation (link TBD).</remarks>
        /// <returns>
        /// A <see cref="Task"/> representing the <see cref="IApiResponse"/> instance containing the result:
        /// <list type="table">
        /// <listheader>
        /// <term>Status</term>
        /// <description>Description</description>
        /// </listheader>
        /// <item>
        /// <term>401</term>
        /// <description>Unauthorized</description>
        /// </item>
        /// <item>
        /// <term>403</term>
        /// <description>Forbidden</description>
        /// </item>
        /// <item>
        /// <term>200</term>
        /// <description>Successfully returned the dialog seen log records.</description>
        /// </item>
        /// <item>
        /// <term>404</term>
        /// <description>Not Found</description>
        /// </item>
        /// </list>
        /// </returns>
        [Headers("Accept: application/json, application/problem+json")]
        [Get("/api/v1/serviceowner/dialogs/{dialogId}/seenlog")]
        Task<IApiResponse<ICollection<SearchSeenLogDto>>> SearchDialogSeenLogSO(System.Guid dialogId, CancellationToken cancellationToken = default);

        /// <summary>Gets a single dialog seen log record</summary>
        /// <remarks>Gets a single dialog seen log record. For more information see the documentation (link TBD).</remarks>
        /// <returns>
        /// A <see cref="Task"/> representing the <see cref="IApiResponse"/> instance containing the result:
        /// <list type="table">
        /// <listheader>
        /// <term>Status</term>
        /// <description>Description</description>
        /// </listheader>
        /// <item>
        /// <term>401</term>
        /// <description>Unauthorized</description>
        /// </item>
        /// <item>
        /// <term>403</term>
        /// <description>Forbidden</description>
        /// </item>
        /// <item>
        /// <term>200</term>
        /// <description>Successfully returned the dialog seen log record.</description>
        /// </item>
        /// <item>
        /// <term>404</term>
        /// <description>Not Found</description>
        /// </item>
        /// </list>
        /// </returns>
        [Headers("Accept: application/json, application/problem+json")]
        [Get("/api/v1/serviceowner/dialogs/{dialogId}/seenlog/{seenLogId}")]
        Task<IApiResponse<GetDialogSeenLogDtoSO>> GetDialogSeenLogSO(System.Guid dialogId, System.Guid seenLogId, CancellationToken cancellationToken = default);

        /// <summary>Replaces a dialog</summary>
        /// <remarks>
        /// Replaces a given dialog with the supplied model. For more information see the documentation (link TBD).
        /// 
        /// Optimistic concurrency control is implemented using the If-Match header. Supply the Revision value from the GetDialog endpoint to ensure that the dialog is not modified/deleted by another request in the meantime.
        /// </remarks>
        /// <returns>
        /// A <see cref="Task"/> representing the <see cref="IApiResponse"/> instance containing the result:
        /// <list type="table">
        /// <listheader>
        /// <term>Status</term>
        /// <description>Description</description>
        /// </listheader>
        /// <item>
        /// <term>401</term>
        /// <description>Missing or invalid authentication token. Requires a Maskinporten-token with the scope \"digdir:dialogporten.serviceprovider\".</description>
        /// </item>
        /// <item>
        /// <term>403</term>
        /// <description>Unauthorized to update the supplied dialog (not owned by authenticated organization or has additional scope requirements defined in policy).</description>
        /// </item>
        /// <item>
        /// <term>204</term>
        /// <description>The dialog aggregate was updated successfully.</description>
        /// </item>
        /// <item>
        /// <term>400</term>
        /// <description>Validation error occured. See problem details for a list of errors.</description>
        /// </item>
        /// <item>
        /// <term>404</term>
        /// <description>The given dialog ID was not found or is already deleted.</description>
        /// </item>
        /// <item>
        /// <term>412</term>
        /// <description>The supplied If-Match header did not match the current Revision value for the dialog. The request was not applied.</description>
        /// </item>
        /// <item>
        /// <term>422</term>
        /// <description>Domain error occured. See problem details for a list of errors.</description>
        /// </item>
        /// </list>
        /// </returns>
        [Headers("Accept: application/problem+json")]
        [Put("/api/v1/serviceowner/dialogs/{dialogId}")]
        Task<IApiResponse> ReplaceDialog(System.Guid dialogId, [Body] UpdateDialogDto dto, [Header("if-Match")] System.Guid? if_Match, CancellationToken cancellationToken = default);

        /// <summary>Gets a single dialog</summary>
        /// <remarks>
        /// Gets a single dialog aggregate. For more information see the documentation (link TBD).
        /// 
        /// Note that this operation may return deleted dialogs (see the field `DeletedAt`).
        /// </remarks>
        /// <param name="endUserId">Filter by end user id</param>
        /// <returns>
        /// A <see cref="Task"/> representing the <see cref="IApiResponse"/> instance containing the result:
        /// <list type="table">
        /// <listheader>
        /// <term>Status</term>
        /// <description>Description</description>
        /// </listheader>
        /// <item>
        /// <term>401</term>
        /// <description>Missing or invalid authentication token. Requires a Maskinporten-token with the scope \"digdir:dialogporten.serviceprovider\".</description>
        /// </item>
        /// <item>
        /// <term>403</term>
        /// <description>Unauthorized to get the supplied dialog (not owned by authenticated organization or has additional scope requirements defined in policy).</description>
        /// </item>
        /// <item>
        /// <term>200</term>
        /// <description>Successfully returned the dialog aggregate.</description>
        /// </item>
        /// <item>
        /// <term>404</term>
        /// <description>The given dialog ID was not found or is already deleted.</description>
        /// </item>
        /// </list>
        /// </returns>
        [Headers("Accept: application/json, application/problem+json")]
        [Get("/api/v1/serviceowner/dialogs/{dialogId}")]
        Task<IApiResponse<GetDialogDtoSO>> GetDialogSO(System.Guid dialogId, [Query] string endUserId, CancellationToken cancellationToken = default);

        /// <summary>Deletes a dialog</summary>
        /// <remarks>
        /// Deletes a given dialog (soft delete). For more information see the documentation (link TBD).
        /// 
        /// Note that the dialog will still be available on the single details endpoint, but will have a deleted status. It will not appear on the list endpoint for either service owners nor end users.
        /// If end users attempt to access the dialog via the details endpoint, they will get a 410 Gone response.
        /// 
        /// Optimistic concurrency control is implemented using the If-Match header. Supply the Revision value from the GetDialog endpoint to ensure that the dialog is not deleted by another request in the meantime.
        /// </remarks>
        /// <returns>
        /// A <see cref="Task"/> representing the <see cref="IApiResponse"/> instance containing the result:
        /// <list type="table">
        /// <listheader>
        /// <term>Status</term>
        /// <description>Description</description>
        /// </listheader>
        /// <item>
        /// <term>401</term>
        /// <description>Missing or invalid authentication token. Requires a Maskinporten-token with the scope \"digdir:dialogporten.serviceprovider\".</description>
        /// </item>
        /// <item>
        /// <term>403</term>
        /// <description>Unauthorized to delete the supplied dialog (not owned by authenticated organization or has additional scope requirements defined in policy).</description>
        /// </item>
        /// <item>
        /// <term>204</term>
        /// <description>The dialog aggregate was deleted successfully.</description>
        /// </item>
        /// <item>
        /// <term>404</term>
        /// <description>The given dialog ID was not found or is already deleted.</description>
        /// </item>
        /// <item>
        /// <term>412</term>
        /// <description>The supplied If-Match header did not match the current Revision value for the dialog. The request was not applied.</description>
        /// </item>
        /// </list>
        /// </returns>
        [Headers("Accept: application/problem+json")]
        [Delete("/api/v1/serviceowner/dialogs/{dialogId}")]
        Task<IApiResponse> DeleteDialog(System.Guid dialogId, [Header("if-Match")] System.Guid? if_Match, CancellationToken cancellationToken = default);

        /// <summary>Patch a single dialog</summary>
        /// <remarks>
        /// Patches a dialog aggregate with a RFC6902 JSON Patch document. The patch document must be a JSON array of RFC6902 operations.
        /// See [https://tools.ietf.org/html/rfc6902](https://tools.ietf.org/html/rfc6902) for more information.
        /// 
        /// Optimistic concurrency control is implemented using the If-Match header. Supply the Revision value from the GetDialog endpoint to ensure that the dialog is not modified/deleted by another request in the meantime.
        /// </remarks>
        /// <returns>
        /// A <see cref="Task"/> representing the <see cref="IApiResponse"/> instance containing the result:
        /// <list type="table">
        /// <listheader>
        /// <term>Status</term>
        /// <description>Description</description>
        /// </listheader>
        /// <item>
        /// <term>204</term>
        /// <description>Patch was successfully applied.</description>
        /// </item>
        /// <item>
        /// <term>400</term>
        /// <description>Validation error occured. See problem details for a list of errors.</description>
        /// </item>
        /// <item>
        /// <term>401</term>
        /// <description>Missing or invalid authentication token. Requires a Maskinporten-token with the scope \\\"digdir:dialogporten.serviceprovider\\\"</description>
        /// </item>
        /// <item>
        /// <term>403</term>
        /// <description>Unauthorized to update a dialog for the given serviceResource (not owned by authenticated organization or has additional scope requirements defined in policy)</description>
        /// </item>
        /// <item>
        /// <term>404</term>
        /// <description>The given dialog ID was not found or is deleted</description>
        /// </item>
        /// <item>
        /// <term>412</term>
        /// <description>The supplied Revision does not match the current Revision of the dialog</description>
        /// </item>
        /// <item>
        /// <term>422</term>
        /// <description>Domain error occured. See problem details for a list of errors.</description>
        /// </item>
        /// </list>
        /// </returns>
        [Headers("Accept: application/json")]
        [Patch("/api/v1/serviceowner/dialogs/{dialogId}")]
        Task<IApiResponse> Patch(System.Guid dialogId, [Body] IEnumerable<Operation> patchDocument, [Header("If-Match")] System.Guid? etag, CancellationToken cancellationToken = default);

        /// <summary>Gets a list of dialogs</summary>
        /// <remarks>
        /// Performs a search for dialogs, returning a paginated list of dialogs. For more information see the documentation (link TBD).
        /// 
        /// * All date parameters must contain explicit time zone. Example: 2023-10-27T10:00:00Z or 2023-10-27T10:00:00+01:00
        /// * See "continuationToken" in the response for how to get the next page of results.
        /// * hasNextPage will be set to true if there are more items to get.
        /// </remarks>
        /// <param name="serviceResource">Filter by one or more service resources</param>
        /// <param name="party">Filter by one or more owning parties</param>
        /// <param name="endUserId">Filter by end user id</param>
        /// <param name="extendedStatus">Filter by one or more extended statuses</param>
        /// <param name="externalReference">Filter by external reference</param>
        /// <param name="status">Filter by status</param>
        /// <param name="createdAfter">Only return dialogs created after this date</param>
        /// <param name="createdBefore">Only return dialogs created before this date</param>
        /// <param name="updatedAfter">Only return dialogs updated after this date</param>
        /// <param name="updatedBefore">Only return dialogs updated before this date</param>
        /// <param name="dueAfter">Only return dialogs with due date after this date</param>
        /// <param name="dueBefore">Only return dialogs with due date before this date</param>
        /// <param name="visibleAfter">Only return dialogs with visible-from date after this date</param>
        /// <param name="visibleBefore">Only return dialogs with visible-from date before this date</param>
        /// <param name="process">Filter by process</param>
        /// <param name="search">Search string for free text search. Will attempt to fuzzily match in all free text fields in the aggregate</param>
        /// <param name="searchLanguageCode">Limit free text search to texts with this language code, e.g. 'no', 'en'. Culture codes will be normalized to neutral language codes (ISO 639). Default: search all culture codes</param>
        /// <param name="continuationToken">Supply "continuationToken" for the response to get the next page of results, if hasNextPage is true</param>
        /// <param name="limit">Limit the number of results per page (1-1000, default: 100)</param>
        /// <returns>
        /// A <see cref="Task"/> representing the <see cref="IApiResponse"/> instance containing the result:
        /// <list type="table">
        /// <listheader>
        /// <term>Status</term>
        /// <description>Description</description>
        /// </listheader>
        /// <item>
        /// <term>200</term>
        /// <description>Successfully returned the dialog list.</description>
        /// </item>
        /// <item>
        /// <term>401</term>
        /// <description>Missing or invalid authentication token. Requires a Maskinporten-token with the scope \"digdir:dialogporten.serviceprovider.search\".</description>
        /// </item>
        /// </list>
        /// </returns>
        [Headers("Accept: application/json")]
        [Get("/api/v1/serviceowner/dialogs")]
        Task<IApiResponse<PaginatedListOfSearchDialogDtoSO>> GetDialogListSO([Query(CollectionFormat.Multi)] IEnumerable<string> serviceResource, [Query(CollectionFormat.Multi)] IEnumerable<string> party, [Query] string endUserId, [Query(CollectionFormat.Multi)] IEnumerable<string> extendedStatus, [Query] string externalReference, [Query(CollectionFormat.Multi)] IEnumerable<DialogStatus_Values> status, [Query] System.DateTimeOffset? createdAfter, [Query] System.DateTimeOffset? createdBefore, [Query] System.DateTimeOffset? updatedAfter, [Query] System.DateTimeOffset? updatedBefore, [Query] System.DateTimeOffset? dueAfter, [Query] System.DateTimeOffset? dueBefore, [Query] System.DateTimeOffset? visibleAfter, [Query] System.DateTimeOffset? visibleBefore, [Query] string process, [Query] string search, [Query] string searchLanguageCode, [Query] OrderSetOfTOrderDefinitionAndTTarget orderBy, [Query] ContinuationTokenSetOfTOrderDefinitionAndTTarget continuationToken, [Query] int? limit, CancellationToken cancellationToken = default);

        /// <summary>Creates a new dialog</summary>
        /// <remarks>
        /// The dialog is created with the given configuration. For more information see the documentation (link TBD).
        /// 
        /// For detailed information on validation rules, see [the source for CreateDialogCommandValidator](https://github.com/digdir/dialogporten/blob/main/src/Digdir.Domain.Dialogporten.Application/Features/V1/ServiceOwner/Dialogs/Commands/Create/CreateDialogCommandValidator.cs)
        /// </remarks>
        /// <returns>
        /// A <see cref="Task"/> representing the <see cref="IApiResponse"/> instance containing the result:
        /// <list type="table">
        /// <listheader>
        /// <term>Status</term>
        /// <description>Description</description>
        /// </listheader>
        /// <item>
        /// <term>401</term>
        /// <description>Missing or invalid authentication token. Requires a Maskinporten-token with the scope \"digdir:dialogporten.serviceprovider\".</description>
        /// </item>
        /// <item>
        /// <term>403</term>
        /// <description>Unauthorized to create a dialog for the given serviceResource (not owned by authenticated organization or has additional scope requirements defined in policy).</description>
        /// </item>
        /// <item>
        /// <term>201</term>
        /// <description>The UUID of the created the dialog aggregate. A relative URL to the newly created activity is set in the \"Location\" header.</description>
        /// </item>
        /// <item>
        /// <term>400</term>
        /// <description>Validation error occured. See problem details for a list of errors.</description>
        /// </item>
        /// <item>
        /// <term>422</term>
        /// <description>Domain error occured. See problem details for a list of errors.</description>
        /// </item>
        /// </list>
        /// </returns>
        [Headers("Accept: application/json, application/problem+json")]
        [Post("/api/v1/serviceowner/dialogs")]
        Task<IApiResponse<string>> CreateDialog([Body, AliasAs("CreateDialogCommand")] CreateDialogCommand createDialogCommand, CancellationToken cancellationToken = default);

        /// <summary>Permanently deletes a dialog</summary>
        /// <remarks>
        /// Deletes a given dialog (hard delete). For more information see the documentation (link TBD).
        /// 
        /// Optimistic concurrency control is implemented using the If-Match header. Supply the Revision value from the GetDialog endpoint to ensure that the dialog is not deleted by another request in the meantime.
        /// </remarks>
        /// <returns>
        /// A <see cref="Task"/> representing the <see cref="IApiResponse"/> instance containing the result:
        /// <list type="table">
        /// <listheader>
        /// <term>Status</term>
        /// <description>Description</description>
        /// </listheader>
        /// <item>
        /// <term>401</term>
        /// <description>Missing or invalid authentication token. Requires a Maskinporten-token with the scope \"digdir:dialogporten.serviceprovider\".</description>
        /// </item>
        /// <item>
        /// <term>403</term>
        /// <description>Unauthorized to delete the supplied dialog (not owned by authenticated organization or has additional scope requirements defined in policy).</description>
        /// </item>
        /// <item>
        /// <term>204</term>
        /// <description>The dialog aggregate was deleted successfully.</description>
        /// </item>
        /// <item>
        /// <term>404</term>
        /// <description>The given dialog ID was not found or is already deleted.</description>
        /// </item>
        /// <item>
        /// <term>412</term>
        /// <description>The supplied If-Match header did not match the current Revision value for the dialog. The request was not applied.</description>
        /// </item>
        /// </list>
        /// </returns>
        [Headers("Accept: application/problem+json")]
        [Post("/api/v1/serviceowner/dialogs/{dialogId}/actions/purge")]
        Task<IApiResponse> PurgeDialog(System.Guid dialogId, [Header("if-Match")] System.Guid? if_Match, CancellationToken cancellationToken = default);

        /// <summary>Gets a list of dialog activities</summary>
        /// <remarks>Gets the list of activities belonging to a dialog</remarks>
        /// <returns>
        /// A <see cref="Task"/> representing the <see cref="IApiResponse"/> instance containing the result:
        /// <list type="table">
        /// <listheader>
        /// <term>Status</term>
        /// <description>Description</description>
        /// </listheader>
        /// <item>
        /// <term>200</term>
        /// <description>Successfully returned the dialog activity list.</description>
        /// </item>
        /// <item>
        /// <term>401</term>
        /// <description>Missing or invalid authentication token. Requires a Maskinporten-token with the scope \"digdir:dialogporten.serviceprovider\".</description>
        /// </item>
        /// <item>
        /// <term>403</term>
        /// <description>Unauthorized to get the supplied dialog (not owned by authenticated organization or has additional scope requirements defined in policy).</description>
        /// </item>
        /// </list>
        /// </returns>
        [Headers("Accept: text/plain, application/json")]
        [Get("/api/v1/serviceowner/dialogs/{dialogId}/activities")]
        Task<IApiResponse<object>> GetDialogActivityListSO(System.Guid dialogId, CancellationToken cancellationToken = default);

        /// <summary>Adds a activity to a dialogs activity history</summary>
        /// <remarks>
        /// The activity is created with the given configuration. For more information see the documentation (link TBD).
        /// 
        /// Optimistic concurrency control is implemented using the If-Match header. Supply the Revision value from the GetDialog endpoint to ensure that the dialog is not modified/deleted by another request in the meantime.
        /// </remarks>
        /// <returns>
        /// A <see cref="Task"/> representing the <see cref="IApiResponse"/> instance containing the result:
        /// <list type="table">
        /// <listheader>
        /// <term>Status</term>
        /// <description>Description</description>
        /// </listheader>
        /// <item>
        /// <term>401</term>
        /// <description>Missing or invalid authentication token. Requires a Maskinporten-token with the scope \"digdir:dialogporten.serviceprovider\".</description>
        /// </item>
        /// <item>
        /// <term>403</term>
        /// <description>Unauthorized to create child entity for the given dialog (dialog not owned by authenticated organization or has additional scope requirements defined in service identifiers policy).</description>
        /// </item>
        /// <item>
        /// <term>201</term>
        /// <description>The UUID of the created the dialog activity. A relative URL to the newly created activity is set in the \"Location\" header.</description>
        /// </item>
        /// <item>
        /// <term>400</term>
        /// <description>Validation error occured. See problem details for a list of errors.</description>
        /// </item>
        /// <item>
        /// <term>404</term>
        /// <description>The given dialog ID was not found or is already deleted.</description>
        /// </item>
        /// <item>
        /// <term>412</term>
        /// <description>The supplied If-Match header did not match the current Revision value for the dialog. The request was not applied.</description>
        /// </item>
        /// <item>
        /// <term>422</term>
        /// <description>Domain error occured. See problem details for a list of errors.</description>
        /// </item>
        /// </list>
        /// </returns>
        [Headers("Accept: application/json, application/problem+json")]
        [Post("/api/v1/serviceowner/dialogs/{dialogId}/activities")]
        Task<IApiResponse<string>> CreateDialogActivity(System.Guid dialogId, [Body, AliasAs("CreateDialogActivityRequest")] CreateDialogActivityRequest createDialogActivityRequest, [Header("if-Match")] System.Guid? if_Match, CancellationToken cancellationToken = default);

        /// <summary>Returns a boolean value based on conditions used to determine if a notification is to be sent</summary>
        /// <remarks>Used by Altinn Notification only. Takes a dialogId and returns a boolean value based on conditions used to determine if a notification is to be sent.</remarks>
        /// <returns>
        /// A <see cref="Task"/> representing the <see cref="IApiResponse"/> instance containing the result:
        /// <list type="table">
        /// <listheader>
        /// <term>Status</term>
        /// <description>Description</description>
        /// </listheader>
        /// <item>
        /// <term>200</term>
        /// <description>Successfully returned the notification determination.</description>
        /// </item>
        /// <item>
        /// <term>401</term>
        /// <description>Missing or invalid authentication token. Requires a Maskinporten-token with the scope \"altinn:system/notifications.condition.check\".</description>
        /// </item>
        /// <item>
        /// <term>403</term>
        /// <description>Forbidden</description>
        /// </item>
        /// </list>
        /// </returns>
        [Headers("Accept: text/plain, application/json")]
        [Get("/api/v1/serviceowner/dialogs/{dialogId}/notification-condition")]
        Task<IApiResponse<object>> GetDialogActivityNotificationConditionSO(System.Guid dialogId, [Query] NotificationConditionType conditionType, [Query] DialogActivityType_Values activityType, [Query] System.Guid? transmissionId, CancellationToken cancellationToken = default);

        /// <summary>Gets a single dialog activity</summary>
        /// <remarks>Gets a single activity belonging to a dialog. For more information see the documentation (link TBD).</remarks>
        /// <returns>
        /// A <see cref="Task"/> representing the <see cref="IApiResponse"/> instance containing the result:
        /// <list type="table">
        /// <listheader>
        /// <term>Status</term>
        /// <description>Description</description>
        /// </listheader>
        /// <item>
        /// <term>401</term>
        /// <description>Missing or invalid authentication token. Requires a Maskinporten-token with the scope \"digdir:dialogporten.serviceprovider\".</description>
        /// </item>
        /// <item>
        /// <term>403</term>
        /// <description>Unauthorized to get child entity for the given dialog (dialog not owned by authenticated organization or has additional scope requirements defined in service identifiers policy).</description>
        /// </item>
        /// <item>
        /// <term>200</term>
        /// <description>Successfully returned the dialog activity.</description>
        /// </item>
        /// <item>
        /// <term>404</term>
        /// <description>The given dialog ID was not found or was deleted, or the given activity ID was not found.</description>
        /// </item>
        /// </list>
        /// </returns>
        [Headers("Accept: application/problem+json")]
        [Get("/api/v1/serviceowner/dialogs/{dialogId}/activities/{activityId}")]
        Task<IApiResponse> GetDialogActivitySO(System.Guid dialogId, System.Guid activityId, CancellationToken cancellationToken = default);


    }    

}


//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 612 // Disable "CS0612 '...' is obsolete"
#pragma warning disable 649 // Disable "CS0649 Field is never assigned to, and will always have its default value null"
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"
#pragma warning disable 8604 // Disable "CS8604 Possible null reference argument for parameter"
#pragma warning disable 8625 // Disable "CS8625 Cannot convert null literal to non-nullable reference type"
#pragma warning disable 8618 // Added manually
#pragma warning disable 8765 // Disable "CS8765 Nullability of type of parameter doesn't match overridden member (possibly because of nullability attributes)."

namespace Digdir.BDB.Dialogporten.ServiceProvider.Clients
{
    using System = global::System;

    

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetOauthAuthorizationServerDto
    {

        [JsonPropertyName("issuer")]
        public string Issuer { get; set; }

        [JsonPropertyName("jwks_uri")]
        public string Jwks_uri { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetJwksDto
    {

        [JsonPropertyName("keys")]
        public ICollection<Jwk> Keys { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Jwk
    {

        [JsonPropertyName("kty")]
        public string Kty { get; set; }

        [JsonPropertyName("use")]
        public string Use { get; set; }

        [JsonPropertyName("kid")]
        public string Kid { get; set; }

        [JsonPropertyName("crv")]
        public string Crv { get; set; }

        [JsonPropertyName("x")]
        public string X { get; set; }

        [JsonPropertyName("alg")]
        public string Alg { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProblemDetails
    {

        [JsonPropertyName("type")]
        public string Type { get; set; } = "https://www.rfc-editor.org/rfc/rfc7231#section-6.5.1";

        [JsonPropertyName("title")]
        public string Title { get; set; } = "One or more validation errors occurred.";

        [JsonPropertyName("status")]
        public int Status { get; set; } = 400;

        [JsonPropertyName("instance")]
        public string Instance { get; set; } = "/api/route";

        [JsonPropertyName("traceId")]
        public string TraceId { get; set; } = "0HMPNHL0JHL76:00000001";

        [JsonPropertyName("detail")]
        public string Detail { get; set; }

        [JsonPropertyName("errors")]
        public ICollection<ProblemDetails_Error> Errors { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProblemDetails_Error
    {

        [JsonPropertyName("name")]
        public string Name { get; set; } = "Error or field name";

        [JsonPropertyName("reason")]
        public string Reason { get; set; } = "Error reason";

        [JsonPropertyName("code")]
        public string Code { get; set; }

        [JsonPropertyName("severity")]
        public string Severity { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateDialogTransmissionRequest
    {
        /// <summary>
        /// The UUDIv7 of the action may be provided to support idempotent additions to the list of transmissions.
        /// <br/>If not supplied, a new UUIDv7 will be generated.
        /// </summary>

        [JsonPropertyName("id")]
        public System.Guid? Id { get; set; }

        /// <summary>
        /// If supplied, overrides the creating date and time for the transmission.
        /// <br/>If not supplied, the current date /time will be used.
        /// </summary>

        [JsonPropertyName("createdAt")]
        public System.DateTimeOffset CreatedAt { get; set; }

        /// <summary>
        /// Contains an authorization resource attributeId, that can used in custom authorization rules in the XACML service
        /// <br/>policy, which by default is the policy belonging to the service referred to by "serviceResource" in the dialog.
        /// <br/>            
        /// <br/>Can also be used to refer to other service policies.
        /// </summary>

        [JsonPropertyName("authorizationAttribute")]
        public string AuthorizationAttribute { get; set; }

        /// <summary>
        /// Arbitrary URI/URN describing a service-specific transmission type.
        /// <br/>            
        /// <br/>Refer to the service-specific documentation provided by the service owner for details (if in use).
        /// </summary>

        [JsonPropertyName("extendedType")]
        public System.Uri ExtendedType { get; set; }

        /// <summary>
        /// Reference to any other transmission that this transmission is related to.
        /// </summary>

        [JsonPropertyName("relatedTransmissionId")]
        public System.Guid? RelatedTransmissionId { get; set; }

        /// <summary>
        /// The type of transmission.
        /// </summary>

        [JsonPropertyName("type")]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public DialogTransmissionType_Values Type { get; set; }

        /// <summary>
        /// The actor that sent the transmission.
        /// </summary>

        [JsonPropertyName("sender")]
        public UpdateDialogDialogTransmissionSenderActorDto Sender { get; set; }

        /// <summary>
        /// The transmission unstructured text content
        /// </summary>

        [JsonPropertyName("content")]
        public UpdateDialogDialogTransmissionContentDto Content { get; set; }

        /// <summary>
        /// The transmission-level attachments
        /// </summary>

        [JsonPropertyName("attachments")]
        public ICollection<UpdateDialogTransmissionAttachmentDto> Attachments { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum DialogTransmissionType_Values
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Information")]
        Information = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Acceptance")]
        Acceptance = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Rejection")]
        Rejection = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Request")]
        Request = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Alert")]
        Alert = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Decision")]
        Decision = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Submission")]
        Submission = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"Correction")]
        Correction = 7,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UpdateDialogDialogTransmissionSenderActorDto
    {
        /// <summary>
        /// The type of actor that sent the transmission.
        /// </summary>

        [JsonPropertyName("actorType")]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public ActorType_Values ActorType { get; set; }

        /// <summary>
        /// Specifies the name of the entity that sent the transmission. Mutually exclusive with ActorId. If ActorId
        /// <br/>is supplied, the name will be automatically populated from the name registries.
        /// </summary>

        [JsonPropertyName("actorName")]
        public string ActorName { get; set; }

        /// <summary>
        /// The identifier of the person or organization that sent the transmission. Mutually exclusive with ActorName.
        /// <br/>Might be omitted if ActorType is "ServiceOwner".
        /// </summary>

        [JsonPropertyName("actorId")]
        public string ActorId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ActorType_Values
    {

        [System.Runtime.Serialization.EnumMember(Value = @"PartyRepresentative")]
        PartyRepresentative = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ServiceOwner")]
        ServiceOwner = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UpdateDialogDialogTransmissionContentDto
    {
        /// <summary>
        /// The transmission title. Must be text/plain.
        /// </summary>

        [JsonPropertyName("title")]
        public ContentValueDto Title { get; set; }

        /// <summary>
        /// The transmission summary.
        /// </summary>

        [JsonPropertyName("summary")]
        public ContentValueDto Summary { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContentValueDto
    {
        /// <summary>
        /// A list of localizations for the content
        /// </summary>

        [JsonPropertyName("value")]
        public ICollection<LocalizationDto> Value { get; set; }

        /// <summary>
        /// Media type of the content (plaintext, Markdown). Can also indicate that the content is embeddable.
        /// </summary>

        [JsonPropertyName("mediaType")]
        public string MediaType { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LocalizationDto
    {
        /// <summary>
        /// The localized text or URI reference
        /// </summary>

        [JsonPropertyName("value")]
        public string Value { get; set; }

        /// <summary>
        /// The language code of the localization in ISO 639-1 format
        /// </summary>

        [JsonPropertyName("languageCode")]
        public string LanguageCode { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UpdateDialogTransmissionAttachmentDto
    {
        /// <summary>
        /// The display name of the attachment that should be used in GUIs.
        /// </summary>

        [JsonPropertyName("displayName")]
        public ICollection<LocalizationDto> DisplayName { get; set; }

        /// <summary>
        /// The URLs associated with the attachment, each referring to a different representation of the attachment.
        /// </summary>

        [JsonPropertyName("urls")]
        public ICollection<UpdateDialogTransmissionAttachmentUrlDto> Urls { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UpdateDialogTransmissionAttachmentUrlDto
    {
        /// <summary>
        /// The fully qualified URL of the attachment.
        /// </summary>

        [JsonPropertyName("url")]
        public System.Uri Url { get; set; }

        /// <summary>
        /// The media type of the attachment.
        /// </summary>

        [JsonPropertyName("mediaType")]
        public string MediaType { get; set; }

        /// <summary>
        /// The type of consumer the URL is intended for.
        /// </summary>

        [JsonPropertyName("consumerType")]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public AttachmentUrlConsumerType_Values ConsumerType { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum AttachmentUrlConsumerType_Values
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Gui")]
        Gui = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Api")]
        Api = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SearchSeenLogDto
    {

        [JsonPropertyName("id")]
        public System.Guid Id { get; set; }

        [JsonPropertyName("seenAt")]
        public System.DateTimeOffset SeenAt { get; set; }

        [JsonPropertyName("seenBy")]
        public SearchSeenLogSeenByActorDto SeenBy { get; set; }

        [JsonPropertyName("isViaServiceOwner")]
        public bool? IsViaServiceOwner { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SearchSeenLogSeenByActorDto
    {

        [JsonPropertyName("id")]
        public System.Guid Id { get; set; }

        [JsonPropertyName("actorName")]
        public string ActorName { get; set; }

        [JsonPropertyName("actorId")]
        public string ActorId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetDialogSeenLogDtoSO
    {

        [JsonPropertyName("id")]
        public System.Guid Id { get; set; }

        [JsonPropertyName("seenAt")]
        public System.DateTimeOffset SeenAt { get; set; }

        [JsonPropertyName("seenBy")]
        public GetDialogSeenLogSeenByActorDtoSO SeenBy { get; set; }

        [JsonPropertyName("isViaServiceOwner")]
        public bool? IsViaServiceOwner { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetDialogSeenLogSeenByActorDtoSO
    {

        [JsonPropertyName("id")]
        public System.Guid Id { get; set; }

        [JsonPropertyName("actorName")]
        public string ActorName { get; set; }

        [JsonPropertyName("actorId")]
        public string ActorId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UpdateDialogRequest
    {

        [JsonPropertyName("dto")]
        public UpdateDialogDto Dto { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UpdateDialogDto
    {
        /// <summary>
        /// Advisory indicator of progress, represented as 1-100 percentage value. 100% representing a dialog that has come
        /// <br/>to a natural completion (successful or not).
        /// </summary>

        [JsonPropertyName("progress")]
        public int? Progress { get; set; }

        /// <summary>
        /// Arbitrary string with a service-specific indicator of status, typically used to indicate a fine-grained state of
        /// <br/>the dialog to further specify the "status" enum.
        /// </summary>

        [JsonPropertyName("extendedStatus")]
        public string ExtendedStatus { get; set; }

        /// <summary>
        /// Arbitrary string with a service-specific reference to an external system or service.
        /// </summary>

        [JsonPropertyName("externalReference")]
        public string ExternalReference { get; set; }

        /// <summary>
        /// The timestamp when the dialog should be made visible for authorized end users. If not provided, the dialog will be
        /// <br/>immediately available.
        /// </summary>

        [JsonPropertyName("visibleFrom")]
        public System.DateTimeOffset? VisibleFrom { get; set; }

        /// <summary>
        /// The due date for the dialog. Dialogs past due date might be marked as such in frontends but will still be available.
        /// </summary>

        [JsonPropertyName("dueAt")]
        public System.DateTimeOffset? DueAt { get; set; }

        /// <summary>
        /// The expiration date for the dialog. This is the last date when the dialog is available for the end user.
        /// <br/>            
        /// <br/>After this date is passed, the dialog will be considered expired and no longer available for the end user in any
        /// <br/>API. If not supplied, the dialog will be considered to never expire. This field can be changed after creation.
        /// </summary>

        [JsonPropertyName("expiresAt")]
        public System.DateTimeOffset? ExpiresAt { get; set; }

        /// <summary>
        /// The aggregated status of the dialog.
        /// </summary>

        [JsonPropertyName("status")]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public DialogStatus_Values Status { get; set; }

        /// <summary>
        /// The dialog unstructured text content
        /// </summary>

        [JsonPropertyName("content")]
        public UpdateDialogContentDto Content { get; set; }

        /// <summary>
        /// A list of words (tags) that will be used in dialog search queries. Not visible in end-user DTO.
        /// </summary>

        [JsonPropertyName("searchTags")]
        public ICollection<UpdateDialogSearchTagDto> SearchTags { get; set; }

        /// <summary>
        /// The attachments associated with the dialog (on an aggregate level)
        /// </summary>

        [JsonPropertyName("attachments")]
        public ICollection<UpdateDialogDialogAttachmentDto> Attachments { get; set; }

        /// <summary>
        /// The immutable list of transmissions associated with the dialog. When updating via PUT, any transmissions
        /// <br/>added here will be appended to the existing list of transmissions.
        /// </summary>

        [JsonPropertyName("transmissions")]
        public ICollection<UpdateDialogDialogTransmissionDto> Transmissions { get; set; }

        /// <summary>
        /// The GUI actions associated with the dialog. Should be used in browser-based interactive frontends.
        /// </summary>

        [JsonPropertyName("guiActions")]
        public ICollection<UpdateDialogDialogGuiActionDto> GuiActions { get; set; }

        /// <summary>
        /// The API actions associated with the dialog. Should be used in specialized, non-browser-based integrations.
        /// </summary>

        [JsonPropertyName("apiActions")]
        public ICollection<UpdateDialogDialogApiActionDto> ApiActions { get; set; }

        /// <summary>
        /// An immutable list of activities associated with the dialog. When updating via PUT, any activities added here
        /// <br/>will be appended to the existing list of activities.
        /// </summary>

        [JsonPropertyName("activities")]
        public ICollection<UpdateDialogDialogActivityDto> Activities { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum DialogStatus_Values
    {

        [System.Runtime.Serialization.EnumMember(Value = @"New")]
        New = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"InProgress")]
        InProgress = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Draft")]
        Draft = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Sent")]
        Sent = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"RequiresAttention")]
        RequiresAttention = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Completed")]
        Completed = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UpdateDialogContentDto
    {
        /// <summary>
        /// The title of the dialog. Must be text/plain.
        /// </summary>

        [JsonPropertyName("title")]
        public ContentValueDto Title { get; set; }

        /// <summary>
        /// A short summary of the dialog and its current state. Must be text/plain.
        /// </summary>

        [JsonPropertyName("summary")]
        public ContentValueDto Summary { get; set; }

        /// <summary>
        /// Overridden sender name. If not supplied, assume "org" as the sender name. Must be text/plain if supplied.
        /// </summary>

        [JsonPropertyName("senderName")]
        public ContentValueDto SenderName { get; set; }

        /// <summary>
        /// Additional information about the dialog, this may contain Markdown.
        /// </summary>

        [JsonPropertyName("additionalInfo")]
        public ContentValueDto AdditionalInfo { get; set; }

        /// <summary>
        /// Used as the human-readable label used to describe the "ExtendedStatus" field. Must be text/plain.
        /// </summary>

        [JsonPropertyName("extendedStatus")]
        public ContentValueDto ExtendedStatus { get; set; }

        /// <summary>
        /// Front-channel embedded content. Used to dynamically embed content in the frontend from an external URL.
        /// </summary>

        [JsonPropertyName("mainContentReference")]
        public ContentValueDto MainContentReference { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UpdateDialogSearchTagDto
    {
        /// <summary>
        /// A search tag value.
        /// </summary>

        [JsonPropertyName("value")]
        public string Value { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UpdateDialogDialogAttachmentDto
    {
        /// <summary>
        /// A UUIDv7 used for merging existing data, unknown IDs will be ignored as this entity does not support user-defined IDs.
        /// </summary>

        [JsonPropertyName("id")]
        public System.Guid? Id { get; set; }

        /// <summary>
        /// The display name of the attachment that should be used in GUIs.
        /// </summary>

        [JsonPropertyName("displayName")]
        public ICollection<LocalizationDto> DisplayName { get; set; }

        /// <summary>
        /// The URLs associated with the attachment, each referring to a different representation of the attachment.
        /// </summary>

        [JsonPropertyName("urls")]
        public ICollection<UpdateDialogDialogAttachmentUrlDto> Urls { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UpdateDialogDialogAttachmentUrlDto
    {
        /// <summary>
        /// A UUIDv7 used for merging existing data, unknown IDs will be ignored as this entity does not support user-defined IDs.
        /// </summary>

        [JsonPropertyName("id")]
        public System.Guid? Id { get; set; }

        /// <summary>
        /// The fully qualified URL of the attachment.
        /// </summary>

        [JsonPropertyName("url")]
        public System.Uri Url { get; set; }

        /// <summary>
        /// The media type of the attachment.
        /// </summary>

        [JsonPropertyName("mediaType")]
        public string MediaType { get; set; }

        /// <summary>
        /// The type of consumer the URL is intended for.
        /// </summary>

        [JsonPropertyName("consumerType")]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public AttachmentUrlConsumerType_Values ConsumerType { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UpdateDialogDialogTransmissionDto
    {
        /// <summary>
        /// The UUDIv7 of the action may be provided to support idempotent additions to the list of transmissions.
        /// <br/>If not supplied, a new UUIDv7 will be generated.
        /// </summary>

        [JsonPropertyName("id")]
        public System.Guid? Id { get; set; }

        /// <summary>
        /// If supplied, overrides the creating date and time for the transmission.
        /// <br/>If not supplied, the current date /time will be used.
        /// </summary>

        [JsonPropertyName("createdAt")]
        public System.DateTimeOffset CreatedAt { get; set; }

        /// <summary>
        /// Contains an authorization resource attributeId, that can used in custom authorization rules in the XACML service
        /// <br/>policy, which by default is the policy belonging to the service referred to by "serviceResource" in the dialog.
        /// <br/>            
        /// <br/>Can also be used to refer to other service policies.
        /// </summary>

        [JsonPropertyName("authorizationAttribute")]
        public string AuthorizationAttribute { get; set; }

        /// <summary>
        /// Arbitrary URI/URN describing a service-specific transmission type.
        /// <br/>            
        /// <br/>Refer to the service-specific documentation provided by the service owner for details (if in use).
        /// </summary>

        [JsonPropertyName("extendedType")]
        public System.Uri ExtendedType { get; set; }

        /// <summary>
        /// Reference to any other transmission that this transmission is related to.
        /// </summary>

        [JsonPropertyName("relatedTransmissionId")]
        public System.Guid? RelatedTransmissionId { get; set; }

        /// <summary>
        /// The type of transmission.
        /// </summary>

        [JsonPropertyName("type")]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public DialogTransmissionType_Values Type { get; set; }

        /// <summary>
        /// The actor that sent the transmission.
        /// </summary>

        [JsonPropertyName("sender")]
        public UpdateDialogDialogTransmissionSenderActorDto Sender { get; set; }

        /// <summary>
        /// The transmission unstructured text content
        /// </summary>

        [JsonPropertyName("content")]
        public UpdateDialogDialogTransmissionContentDto Content { get; set; }

        /// <summary>
        /// The transmission-level attachments
        /// </summary>

        [JsonPropertyName("attachments")]
        public ICollection<UpdateDialogTransmissionAttachmentDto> Attachments { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UpdateDialogDialogGuiActionDto
    {
        /// <summary>
        /// A UUIDv7 used for merging existing data, unknown IDs will be ignored as this entity does not support user-defined IDs.
        /// </summary>

        [JsonPropertyName("id")]
        public System.Guid? Id { get; set; }

        /// <summary>
        /// The action identifier for the action, corresponding to the "action" attributeId used in the XACML service policy,
        /// </summary>

        [JsonPropertyName("action")]
        public string Action { get; set; }

        /// <summary>
        /// The fully qualified URL of the action, to which the user will be redirected when the action is triggered. Will be set to
        /// <br/>"urn:dialogporten:unauthorized" if the user is not authorized to perform the action.
        /// </summary>

        [JsonPropertyName("url")]
        public System.Uri Url { get; set; }

        /// <summary>
        /// Contains an authorization resource attributeId, that can used in custom authorization rules in the XACML service
        /// <br/>policy, which by default is the policy belonging to the service referred to by "serviceResource" in the dialog.
        /// <br/>            
        /// <br/>Can also be used to refer to other service policies.
        /// </summary>

        [JsonPropertyName("authorizationAttribute")]
        public string AuthorizationAttribute { get; set; }

        /// <summary>
        /// Indicates whether the action results in the dialog being deleted. Used by frontends to implement custom UX
        /// <br/>for delete actions.
        /// </summary>

        [JsonPropertyName("isDeleteDialogAction")]
        public bool IsDeleteDialogAction { get; set; }

        /// <summary>
        /// The HTTP method that the frontend should use when redirecting the user.
        /// </summary>

        [JsonPropertyName("httpMethod")]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public HttpVerb_Values? HttpMethod { get; set; }

        /// <summary>
        /// Indicates a priority for the action, making it possible for frontends to adapt GUI elements based on action
        /// <br/>priority.
        /// </summary>

        [JsonPropertyName("priority")]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public DialogGuiActionPriority_Values Priority { get; set; }

        /// <summary>
        /// The title of the action, this should be short and in verb form. Must be text/plain.
        /// </summary>

        [JsonPropertyName("title")]
        public ICollection<LocalizationDto> Title { get; set; }

        /// <summary>
        /// If there should be a prompt asking the user for confirmation before the action is executed,
        /// <br/>this field should contain the prompt text.
        /// </summary>

        [JsonPropertyName("prompt")]
        public ICollection<LocalizationDto> Prompt { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum HttpVerb_Values
    {

        [System.Runtime.Serialization.EnumMember(Value = @"GET")]
        GET = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"POST")]
        POST = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"PUT")]
        PUT = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"PATCH")]
        PATCH = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"DELETE")]
        DELETE = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"HEAD")]
        HEAD = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"OPTIONS")]
        OPTIONS = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"TRACE")]
        TRACE = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"CONNECT")]
        CONNECT = 8,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum DialogGuiActionPriority_Values
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Primary")]
        Primary = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Secondary")]
        Secondary = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Tertiary")]
        Tertiary = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UpdateDialogDialogApiActionDto
    {
        /// <summary>
        /// A UUIDv7 used for merging existing data, unknown IDs will be ignored as this entity does not support user-defined IDs.
        /// </summary>

        [JsonPropertyName("id")]
        public System.Guid? Id { get; set; }

        /// <summary>
        /// String identifier for the action, corresponding to the "action" attributeId used in the XACML service policy,
        /// <br/>which by default is the policy belonging to the service referred to by "serviceResource" in the dialog
        /// </summary>

        [JsonPropertyName("action")]
        public string Action { get; set; }

        /// <summary>
        /// Contains an authorization resource attributeId, that can used in custom authorization rules in the XACML service
        /// <br/>policy, which by default is the policy belonging to the service referred to by "serviceResource" in the dialog.
        /// <br/>            
        /// <br/>Can also be used to refer to other service policies.
        /// </summary>

        [JsonPropertyName("authorizationAttribute")]
        public string AuthorizationAttribute { get; set; }

        /// <summary>
        /// The endpoints associated with the action.
        /// </summary>

        [JsonPropertyName("endpoints")]
        public ICollection<UpdateDialogDialogApiActionEndpointDto> Endpoints { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UpdateDialogDialogApiActionEndpointDto
    {
        /// <summary>
        /// A UUIDv7 used for merging existing data, unknown IDs will be ignored as this entity does not support user-defined IDs.
        /// </summary>

        [JsonPropertyName("id")]
        public System.Guid? Id { get; set; }

        /// <summary>
        /// Arbitrary string indicating the version of the endpoint.
        /// </summary>

        [JsonPropertyName("version")]
        public string Version { get; set; }

        /// <summary>
        /// The fully qualified URL of the API endpoint.
        /// </summary>

        [JsonPropertyName("url")]
        public System.Uri Url { get; set; }

        /// <summary>
        /// The HTTP method that the endpoint expects for this action.
        /// </summary>

        [JsonPropertyName("httpMethod")]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public HttpVerb_Values HttpMethod { get; set; }

        /// <summary>
        /// Link to documentation for the endpoint, providing documentation for integrators. Should be a URL to a
        /// <br/>human-readable page.
        /// </summary>

        [JsonPropertyName("documentationUrl")]
        public System.Uri DocumentationUrl { get; set; }

        /// <summary>
        /// Link to the request schema for the endpoint. Used to provide documentation for integrators.
        /// <br/>Dialogporten will not validate information on this endpoint.
        /// </summary>

        [JsonPropertyName("requestSchema")]
        public System.Uri RequestSchema { get; set; }

        /// <summary>
        /// Link to the response schema for the endpoint. Used to provide documentation for integrators.
        /// <br/>Dialogporten will not validate information on this endpoint.
        /// </summary>

        [JsonPropertyName("responseSchema")]
        public System.Uri ResponseSchema { get; set; }

        /// <summary>
        /// Boolean indicating if the endpoint is deprecated.
        /// </summary>

        [JsonPropertyName("deprecated")]
        public bool Deprecated { get; set; }

        /// <summary>
        /// Date and time when the endpoint will no longer function. Only set if the endpoint is deprecated. Dialogporten
        /// <br/>will not enforce this date.
        /// </summary>

        [JsonPropertyName("sunsetAt")]
        public System.DateTimeOffset? SunsetAt { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UpdateDialogDialogActivityDto
    {
        /// <summary>
        /// The UUDIv7 of the action may be provided to support idempotent additions to the list of activities.
        /// <br/>If not supplied, a new UUIDv7 will be generated.
        /// </summary>

        [JsonPropertyName("id")]
        public System.Guid? Id { get; set; }

        /// <summary>
        /// If supplied, overrides the creating date and time for the transmission.
        /// <br/>If not supplied, the current date /time will be used.
        /// </summary>

        [JsonPropertyName("createdAt")]
        public System.DateTimeOffset? CreatedAt { get; set; }

        /// <summary>
        /// Arbitrary URI/URN describing a service-specific transmission type.
        /// </summary>

        [JsonPropertyName("extendedType")]
        public System.Uri ExtendedType { get; set; }

        /// <summary>
        /// The type of transmission.
        /// </summary>

        [JsonPropertyName("type")]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public DialogActivityType_Values Type { get; set; }

        /// <summary>
        /// The related activity identifier, if applicable. Must be present in the request body.
        /// </summary>

        [JsonPropertyName("relatedActivityId")]
        public System.Guid? RelatedActivityId { get; set; }

        /// <summary>
        /// If the activity is related to a particular transmission, this field will contain the transmission identifier.
        /// <br/>Must be present in the request body.
        /// </summary>

        [JsonPropertyName("transmissionId")]
        public System.Guid? TransmissionId { get; set; }

        /// <summary>
        /// The actor that performed the activity.
        /// </summary>

        [JsonPropertyName("performedBy")]
        public UpdateDialogDialogActivityPerformedByActorDto PerformedBy { get; set; }

        /// <summary>
        /// Unstructured text describing the activity. Only set if the activity type is "Information".
        /// </summary>

        [JsonPropertyName("description")]
        public ICollection<LocalizationDto> Description { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum DialogActivityType_Values
    {

        [System.Runtime.Serialization.EnumMember(Value = @"DialogCreated")]
        DialogCreated = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"DialogClosed")]
        DialogClosed = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Information")]
        Information = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"TransmissionOpened")]
        TransmissionOpened = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"PaymentMade")]
        PaymentMade = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"SignatureProvided")]
        SignatureProvided = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UpdateDialogDialogActivityPerformedByActorDto
    {
        /// <summary>
        /// What type of actor performed the activity.
        /// </summary>

        [JsonPropertyName("actorType")]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public ActorType_Values ActorType { get; set; }

        /// <summary>
        /// Specifies the name of the entity that performed the activity. Mutually exclusive with ActorId. If ActorId
        /// <br/>is supplied, the name will be automatically populated from the name registries.
        /// </summary>

        [JsonPropertyName("actorName")]
        public string ActorName { get; set; }

        /// <summary>
        /// The identifier of the person or organization that performed the activity. Mutually exclusive with ActorName.
        /// <br/>Might be omitted if ActorType is "ServiceOwner".
        /// </summary>

        [JsonPropertyName("actorId")]
        public string ActorId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PaginatedListOfSearchDialogDtoSO
    {
        /// <summary>
        /// The paginated list of items
        /// </summary>

        [JsonPropertyName("items")]
        public ICollection<SearchDialogDtoSO> Items { get; set; }

        /// <summary>
        /// Whether there are more items available that can be fetched by supplying the continuation token
        /// </summary>

        [JsonPropertyName("hasNextPage")]
        public bool HasNextPage { get; set; }

        /// <summary>
        /// The continuation token to be used to fetch the next page of items
        /// </summary>

        [JsonPropertyName("continuationToken")]
        public string ContinuationToken { get; set; }

        /// <summary>
        /// The current sorting order of the items
        /// </summary>

        [JsonPropertyName("orderBy")]
        public string OrderBy { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SearchDialogDtoSO
    {
        /// <summary>
        /// The unique identifier for the dialog in UUIDv7 format.
        /// </summary>

        [JsonPropertyName("id")]
        public System.Guid Id { get; set; }

        /// <summary>
        /// The service owner code representing the organization (service owner) related to this dialog.
        /// </summary>

        [JsonPropertyName("org")]
        public string Org { get; set; }

        /// <summary>
        /// The service identifier for the service that the dialog is related to in URN-format.
        /// <br/>This corresponds to a service resource in the Altinn Resource Registry.
        /// </summary>

        [JsonPropertyName("serviceResource")]
        public string ServiceResource { get; set; }

        /// <summary>
        /// The ServiceResource type, as defined in Altinn Resource Registry (see ResourceType)
        /// </summary>

        [JsonPropertyName("serviceResourceType")]
        public string ServiceResourceType { get; set; }

        /// <summary>
        /// The party code representing the organization or person that the dialog belongs to in URN format
        /// </summary>

        [JsonPropertyName("party")]
        public string Party { get; set; }

        /// <summary>
        /// Advisory indicator of progress, represented as 1-100 percentage value. 100% representing a dialog that has come
        /// <br/>to a natural completion (successful or not).
        /// </summary>

        [JsonPropertyName("progress")]
        public int? Progress { get; set; }

        /// <summary>
        /// Optional process identifier used to indicate a business process this dialog belongs to
        /// </summary>

        [JsonPropertyName("process")]
        public string Process { get; set; }

        /// <summary>
        /// Optional preceding process identifier to indicate the business process that preceded the process indicated in the "Process" field. Cannot be set without also "Process" being set.
        /// </summary>

        [JsonPropertyName("precedingProcess")]
        public string PrecedingProcess { get; set; }

        /// <summary>
        /// The number of attachments in the dialog made available for browser-based frontends.
        /// </summary>

        [JsonPropertyName("guiAttachmentCount")]
        public int? GuiAttachmentCount { get; set; }

        /// <summary>
        /// Arbitrary string with a service-specific indicator of status, typically used to indicate a fine-grained state of
        /// <br/>the dialog to further specify the "status" enum.
        /// <br/>            
        /// <br/>Refer to the service-specific documentation provided by the service owner for details on the possible values (if
        /// <br/>in use).
        /// </summary>

        [JsonPropertyName("extendedStatus")]
        public string ExtendedStatus { get; set; }

        /// <summary>
        /// The date and time when the dialog was created.
        /// </summary>

        [JsonPropertyName("createdAt")]
        public System.DateTimeOffset CreatedAt { get; set; }

        /// <summary>
        /// The date and time when the dialog was last updated.
        /// </summary>

        [JsonPropertyName("updatedAt")]
        public System.DateTimeOffset UpdatedAt { get; set; }

        /// <summary>
        /// The due date for the dialog. This is the last date when the dialog is expected to be completed.
        /// </summary>

        [JsonPropertyName("dueAt")]
        public System.DateTimeOffset? DueAt { get; set; }

        /// <summary>
        /// The timestamp when the dialog will be made visible for authorized end users.
        /// </summary>

        [JsonPropertyName("visibleFrom")]
        public System.DateTimeOffset? VisibleFrom { get; set; }

        /// <summary>
        /// The aggregated status of the dialog.
        /// </summary>

        [JsonPropertyName("status")]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public DialogStatus_Values Status { get; set; }

        /// <summary>
        /// The latest entry in the dialog's activity log.
        /// </summary>

        [JsonPropertyName("latestActivity")]
        public SearchDialogDialogActivityDtoSO LatestActivity { get; set; }

        /// <summary>
        /// The list of seen log entries for the dialog newer than the dialog ChangedAt date.
        /// </summary>

        [JsonPropertyName("seenSinceLastUpdate")]
        public ICollection<SearchDialogDialogSeenLogDtoSO> SeenSinceLastUpdate { get; set; }

        /// <summary>
        /// The content of the dialog in search results
        /// </summary>

        [JsonPropertyName("content")]
        public SearchDialogContentDtoSO Content { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SearchDialogDialogActivityDtoSO
    {
        /// <summary>
        /// The unique identifier for the activity in UUIDv7 format.
        /// </summary>

        [JsonPropertyName("id")]
        public System.Guid Id { get; set; }

        /// <summary>
        /// The date and time when the activity was created.
        /// </summary>

        [JsonPropertyName("createdAt")]
        public System.DateTimeOffset? CreatedAt { get; set; }

        /// <summary>
        /// An arbitrary string with a service-specific activity type.
        /// <br/>            
        /// <br/>Consult the service-specific documentation provided by the service owner for details (if in use).
        /// </summary>

        [JsonPropertyName("extendedType")]
        public System.Uri ExtendedType { get; set; }

        /// <summary>
        /// The type of activity.
        /// </summary>

        [JsonPropertyName("type")]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public DialogActivityType_Values Type { get; set; }

        /// <summary>
        /// The related activity identifier, if applicable. Must be present in the current dialog.
        /// </summary>

        [JsonPropertyName("relatedActivityId")]
        public System.Guid? RelatedActivityId { get; set; }

        /// <summary>
        /// If the activity is related to a particular transmission, this field will contain the transmission identifier.
        /// </summary>

        [JsonPropertyName("transmissionId")]
        public System.Guid? TransmissionId { get; set; }

        /// <summary>
        /// The actor that performed the activity.
        /// </summary>

        [JsonPropertyName("performedBy")]
        public SearchDialogDialogActivityPerformedByActorDtoSO PerformedBy { get; set; }

        /// <summary>
        /// Unstructured text describing the activity. Only set if the activity type is "Information".
        /// </summary>

        [JsonPropertyName("description")]
        public ICollection<LocalizationDto> Description { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SearchDialogDialogActivityPerformedByActorDtoSO
    {
        /// <summary>
        /// What type of actor performed the activity.
        /// </summary>

        [JsonPropertyName("actorType")]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public ActorType_Values ActorType { get; set; }

        /// <summary>
        /// The name of the person or organization that performed the activity.
        /// <br/>Only set if the actor type is "PartyRepresentative".
        /// </summary>

        [JsonPropertyName("actorName")]
        public string ActorName { get; set; }

        /// <summary>
        /// The identifier of the person or organization that performed the activity.
        /// <br/>May be omitted if ActorType is "ServiceOwner".
        /// </summary>

        [JsonPropertyName("actorId")]
        public string ActorId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SearchDialogDialogSeenLogDtoSO
    {
        /// <summary>
        /// The unique identifier for the seen log entry in UUIDv7 format.
        /// </summary>

        [JsonPropertyName("id")]
        public System.Guid Id { get; set; }

        /// <summary>
        /// The timestamp when the dialog revision was seen
        /// </summary>

        [JsonPropertyName("seenAt")]
        public System.DateTimeOffset SeenAt { get; set; }

        /// <summary>
        /// The actor that saw the dialog revision
        /// </summary>

        [JsonPropertyName("seenBy")]
        public SearchDialogDialogSeenLogSeenByActorDtoSO SeenBy { get; set; }

        /// <summary>
        /// Flag indicating whether the seen log entry was created via the service owner.
        /// <br/>            
        /// <br/>This is used when the service owner uses the service owner API to implement its own frontend.
        /// </summary>

        [JsonPropertyName("isViaServiceOwner")]
        public bool? IsViaServiceOwner { get; set; }

        /// <summary>
        /// Flag indicating whether the seen log entry was created by the end user supplied in the query.
        /// </summary>

        [JsonPropertyName("isCurrentEndUser")]
        public bool IsCurrentEndUser { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SearchDialogDialogSeenLogSeenByActorDtoSO
    {
        /// <summary>
        /// The natural name of the person/business that saw the dialog revision.
        /// </summary>

        [JsonPropertyName("actorName")]
        public string ActorName { get; set; }

        /// <summary>
        /// The identifier of the person/business that saw the dialog revision.
        /// </summary>

        [JsonPropertyName("actorId")]
        public string ActorId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SearchDialogContentDtoSO
    {
        /// <summary>
        /// The title of the dialog.
        /// </summary>

        [JsonPropertyName("title")]
        public ContentValueDto Title { get; set; }

        /// <summary>
        /// A short summary of the dialog and its current state.
        /// </summary>

        [JsonPropertyName("summary")]
        public ContentValueDto Summary { get; set; }

        /// <summary>
        /// Overridden sender name. If not supplied, assume "org" as the sender name.
        /// </summary>

        [JsonPropertyName("senderName")]
        public ContentValueDto SenderName { get; set; }

        /// <summary>
        /// Used as the human-readable label used to describe the "ExtendedStatus" field.
        /// </summary>

        [JsonPropertyName("extendedStatus")]
        public ContentValueDto ExtendedStatus { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetDialogDtoSO
    {
        /// <summary>
        /// The unique identifier for the dialog in UUIDv7 format.
        /// </summary>

        [JsonPropertyName("id")]
        public System.Guid Id { get; set; }

        /// <summary>
        /// The unique identifier for the revision in UUIDv4 format.
        /// </summary>

        [JsonPropertyName("revision")]
        public System.Guid Revision { get; set; }

        /// <summary>
        /// The service owner code representing the organization (service owner) related to this dialog.
        /// </summary>

        [JsonPropertyName("org")]
        public string Org { get; set; }

        /// <summary>
        /// The service identifier for the service that the dialog is related to in URN-format.
        /// <br/>This corresponds to a service resource in the Altinn Resource Registry.
        /// </summary>

        [JsonPropertyName("serviceResource")]
        public string ServiceResource { get; set; }

        /// <summary>
        /// The ServiceResource type, as defined in Altinn Resource Registry (see ResourceType)
        /// </summary>

        [JsonPropertyName("serviceResourceType")]
        public string ServiceResourceType { get; set; }

        /// <summary>
        /// The party code representing the organization or person that the dialog belongs to in URN format
        /// </summary>

        [JsonPropertyName("party")]
        public string Party { get; set; }

        /// <summary>
        /// Advisory indicator of progress, represented as 1-100 percentage value. 100% representing a dialog that has come
        /// <br/>to a natural completion (successful or not).
        /// </summary>

        [JsonPropertyName("progress")]
        public int? Progress { get; set; }

        /// <summary>
        /// Optional process identifier used to indicate a business process this dialog belongs to 
        /// </summary>

        [JsonPropertyName("process")]
        public string Process { get; set; }

        /// <summary>
        /// Optional preceding process identifier to indicate the business process that preceded the process indicated in the "Process" field. Cannot be set without also "Process" being set. 
        /// </summary>

        [JsonPropertyName("precedingProcess")]
        public string PrecedingProcess { get; set; }

        /// <summary>
        /// Arbitrary string with a service-specific indicator of status, typically used to indicate a fine-grained state of
        /// <br/>the dialog to further specify the "status" enum.
        /// <br/>            
        /// <br/>Refer to the service-specific documentation provided by the service owner for details on the possible values (if
        /// <br/>in use).
        /// </summary>

        [JsonPropertyName("extendedStatus")]
        public string ExtendedStatus { get; set; }

        /// <summary>
        /// Arbitrary string with a service-specific reference to an external system or service.
        /// <br/>            
        /// <br/>Refer to the service-specific documentation provided by the service owner for details (if in use).
        /// </summary>

        [JsonPropertyName("externalReference")]
        public string ExternalReference { get; set; }

        /// <summary>
        /// If deleted, the date and time when the deletion was performed.
        /// </summary>

        [JsonPropertyName("deletedAt")]
        public System.DateTimeOffset? DeletedAt { get; set; }

        /// <summary>
        /// The timestamp when the dialog will be made visible for authorized end users.
        /// </summary>

        [JsonPropertyName("visibleFrom")]
        public System.DateTimeOffset? VisibleFrom { get; set; }

        /// <summary>
        /// The due date for the dialog. Dialogs past due date might be marked as such in frontends but will still be available.
        /// </summary>

        [JsonPropertyName("dueAt")]
        public System.DateTimeOffset? DueAt { get; set; }

        /// <summary>
        /// The expiration date for the dialog. This is the last date when the dialog is available for the end user.
        /// <br/>            
        /// <br/>After this date is passed, the dialog will be considered expired and no longer available for the end user in any
        /// <br/>API. If not supplied, the dialog will be considered to never expire. This field can be changed by the service
        /// <br/>owner after the dialog has been created.
        /// </summary>

        [JsonPropertyName("expiresAt")]
        public System.DateTimeOffset? ExpiresAt { get; set; }

        /// <summary>
        /// The date and time when the dialog was created.
        /// </summary>

        [JsonPropertyName("createdAt")]
        public System.DateTimeOffset CreatedAt { get; set; }

        /// <summary>
        /// The date and time when the dialog was last updated.
        /// </summary>

        [JsonPropertyName("updatedAt")]
        public System.DateTimeOffset UpdatedAt { get; set; }

        /// <summary>
        /// The aggregated status of the dialog.
        /// </summary>

        [JsonPropertyName("status")]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public DialogStatus_Values Status { get; set; }

        /// <summary>
        /// The dialog unstructured text content
        /// </summary>

        [JsonPropertyName("content")]
        public GetDialogContentDtoSO Content { get; set; }

        /// <summary>
        /// The list of words (tags) that will be used in dialog search queries. Not visible in end-user DTO.
        /// </summary>

        [JsonPropertyName("searchTags")]
        public ICollection<GetDialogSearchTagDtoSO> SearchTags { get; set; }

        /// <summary>
        /// The attachments associated with the dialog (on an aggregate level)
        /// </summary>

        [JsonPropertyName("attachments")]
        public ICollection<GetDialogDialogAttachmentDtoSO> Attachments { get; set; }

        /// <summary>
        /// The immutable list of transmissions associated with the dialog
        /// </summary>

        [JsonPropertyName("transmissions")]
        public ICollection<GetDialogDialogTransmissionDtoSO> Transmissions { get; set; }

        /// <summary>
        /// The GUI actions associated with the dialog. Should be used in browser-based interactive frontends.
        /// </summary>

        [JsonPropertyName("guiActions")]
        public ICollection<GetDialogDialogGuiActionDtoSO> GuiActions { get; set; }

        /// <summary>
        /// The API actions associated with the dialog. Should be used in specialized, non-browser-based integrations.
        /// </summary>

        [JsonPropertyName("apiActions")]
        public ICollection<GetDialogDialogApiActionDtoSO> ApiActions { get; set; }

        /// <summary>
        /// An immutable list of activities associated with the dialog.
        /// </summary>

        [JsonPropertyName("activities")]
        public ICollection<GetDialogDialogActivityDtoSO> Activities { get; set; }

        /// <summary>
        /// The list of seen log entries for the dialog newer than the dialog ChangedAt date.
        /// </summary>

        [JsonPropertyName("seenSinceLastUpdate")]
        public ICollection<GetDialogDialogSeenLogDtoSO> SeenSinceLastUpdate { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OrderSetOfTOrderDefinitionAndTTarget
    {

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContinuationTokenSetOfTOrderDefinitionAndTTarget
    {

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetDialogContentDtoSO
    {
        /// <summary>
        /// The title of the dialog.
        /// </summary>

        [JsonPropertyName("title")]
        public ContentValueDto Title { get; set; }

        /// <summary>
        /// A short summary of the dialog and its current state.
        /// </summary>

        [JsonPropertyName("summary")]
        public ContentValueDto Summary { get; set; }

        /// <summary>
        /// Overridden sender name. If not supplied, assume "org" as the sender name.
        /// </summary>

        [JsonPropertyName("senderName")]
        public ContentValueDto SenderName { get; set; }

        /// <summary>
        /// Additional information about the dialog, this may contain Markdown.
        /// </summary>

        [JsonPropertyName("additionalInfo")]
        public ContentValueDto AdditionalInfo { get; set; }

        /// <summary>
        /// Used as the human-readable label used to describe the "ExtendedStatus" field.
        /// </summary>

        [JsonPropertyName("extendedStatus")]
        public ContentValueDto ExtendedStatus { get; set; }

        /// <summary>
        /// Front-channel embedded content. Used to dynamically embed content in the frontend from an external URL.
        /// </summary>

        [JsonPropertyName("mainContentReference")]
        public ContentValueDto MainContentReference { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetDialogSearchTagDtoSO
    {
        /// <summary>
        /// A search tag value.
        /// </summary>

        [JsonPropertyName("value")]
        public string Value { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetDialogDialogAttachmentDtoSO
    {
        /// <summary>
        /// The unique identifier for the attachment in UUIDv7 format.
        /// </summary>

        [JsonPropertyName("id")]
        public System.Guid Id { get; set; }

        /// <summary>
        /// The display name of the attachment that should be used in GUIs.
        /// </summary>

        [JsonPropertyName("displayName")]
        public ICollection<LocalizationDto> DisplayName { get; set; }

        /// <summary>
        /// The URLs associated with the attachment, each referring to a different representation of the attachment.
        /// </summary>

        [JsonPropertyName("urls")]
        public ICollection<GetDialogDialogAttachmentUrlDtoSO> Urls { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetDialogDialogAttachmentUrlDtoSO
    {
        /// <summary>
        /// The unique identifier for the attachment URL in UUIDv7 format.
        /// </summary>

        [JsonPropertyName("id")]
        public System.Guid Id { get; set; }

        /// <summary>
        /// The fully qualified URL of the attachment.
        /// </summary>

        [JsonPropertyName("url")]
        public System.Uri Url { get; set; }

        /// <summary>
        /// The media type of the attachment.
        /// </summary>

        [JsonPropertyName("mediaType")]
        public string MediaType { get; set; }

        /// <summary>
        /// What type of consumer the URL is intended for.
        /// </summary>

        [JsonPropertyName("consumerType")]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public AttachmentUrlConsumerType_Values ConsumerType { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetDialogDialogTransmissionDtoSO
    {
        /// <summary>
        /// The unique identifier for the transmission in UUIDv7 format.
        /// </summary>

        [JsonPropertyName("id")]
        public System.Guid Id { get; set; }

        /// <summary>
        /// The date and time when the transmission was created.
        /// </summary>

        [JsonPropertyName("createdAt")]
        public System.DateTimeOffset CreatedAt { get; set; }

        /// <summary>
        /// Contains an authorization resource attributeId, that can used in custom authorization rules in the XACML service
        /// <br/>policy, which by default is the policy belonging to the service referred to by "serviceResource" in the dialog.
        /// <br/>            
        /// <br/>Can also be used to refer to other service policies.
        /// </summary>

        [JsonPropertyName("authorizationAttribute")]
        public string AuthorizationAttribute { get; set; }

        /// <summary>
        /// Flag indicating if the authenticated user supplied in the query is authorized for this transmission.
        /// </summary>

        [JsonPropertyName("isAuthorized")]
        public bool? IsAuthorized { get; set; }

        /// <summary>
        /// Arbitrary URI/URN describing a service-specific transmission type.
        /// <br/>            
        /// <br/>Refer to the service-specific documentation provided by the service owner for details (if in use).
        /// </summary>

        [JsonPropertyName("extendedType")]
        public System.Uri ExtendedType { get; set; }

        /// <summary>
        /// Reference to any other transmission that this transmission is related to.
        /// </summary>

        [JsonPropertyName("relatedTransmissionId")]
        public System.Guid? RelatedTransmissionId { get; set; }

        /// <summary>
        /// The type of transmission.
        /// </summary>

        [JsonPropertyName("type")]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public DialogTransmissionType_Values Type { get; set; }

        /// <summary>
        /// The actor that sent the transmission.
        /// </summary>

        [JsonPropertyName("sender")]
        public GetDialogDialogTransmissionSenderActorDtoSO Sender { get; set; }

        /// <summary>
        /// The transmission unstructured text content
        /// </summary>

        [JsonPropertyName("content")]
        public GetDialogDialogTransmissionContentDtoSO Content { get; set; }

        /// <summary>
        /// The transmission-level attachments
        /// </summary>

        [JsonPropertyName("attachments")]
        public ICollection<GetDialogTransmissionAttachmentDtoSO> Attachments { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetDialogDialogTransmissionSenderActorDtoSO
    {
        /// <summary>
        /// The type of actor that sent the transmission.
        /// </summary>

        [JsonPropertyName("actorType")]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public ActorType_Values ActorType { get; set; }

        /// <summary>
        /// The name of the person or organization that sent the transmission.
        /// </summary>

        [JsonPropertyName("actorName")]
        public string ActorName { get; set; }

        /// <summary>
        /// The identifier of the person or organization that sent the transmission.
        /// </summary>

        [JsonPropertyName("actorId")]
        public string ActorId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetDialogDialogTransmissionContentDtoSO
    {
        /// <summary>
        /// The transmission title.
        /// </summary>

        [JsonPropertyName("title")]
        public ContentValueDto Title { get; set; }

        /// <summary>
        /// The transmission summary.
        /// </summary>

        [JsonPropertyName("summary")]
        public ContentValueDto Summary { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetDialogTransmissionAttachmentDtoSO
    {
        /// <summary>
        /// The unique identifier for the attachment in UUIDv7 format.
        /// </summary>

        [JsonPropertyName("id")]
        public System.Guid Id { get; set; }

        /// <summary>
        /// The display name of the attachment that should be used in GUIs.
        /// </summary>

        [JsonPropertyName("displayName")]
        public ICollection<LocalizationDto> DisplayName { get; set; }

        /// <summary>
        /// The URLs associated with the attachment, each referring to a different representation of the attachment.
        /// </summary>

        [JsonPropertyName("urls")]
        public ICollection<GetDialogTransmissionAttachmentUrlDtoSO> Urls { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetDialogTransmissionAttachmentUrlDtoSO
    {
        /// <summary>
        /// The fully qualified URL of the attachment. Will be set to "urn:dialogporten:unauthorized" if the user is
        /// <br/>not authorized to access the transmission.
        /// </summary>

        [JsonPropertyName("url")]
        public System.Uri Url { get; set; }

        /// <summary>
        /// The media type of the attachment.
        /// </summary>

        [JsonPropertyName("mediaType")]
        public string MediaType { get; set; }

        /// <summary>
        /// The type of consumer the URL is intended for.
        /// </summary>

        [JsonPropertyName("consumerType")]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public AttachmentUrlConsumerType_Values ConsumerType { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetDialogDialogGuiActionDtoSO
    {
        /// <summary>
        /// The unique identifier for the action in UUIDv7 format.
        /// </summary>

        [JsonPropertyName("id")]
        public System.Guid Id { get; set; }

        /// <summary>
        /// The action identifier for the action, corresponding to the "action" attributeId used in the XACML service policy,
        /// </summary>

        [JsonPropertyName("action")]
        public string Action { get; set; }

        /// <summary>
        /// The fully qualified URL of the action, to which the user will be redirected when the action is triggered.
        /// </summary>

        [JsonPropertyName("url")]
        public System.Uri Url { get; set; }

        /// <summary>
        /// Contains an authorization resource attributeId, that can used in custom authorization rules in the XACML service
        /// <br/>policy, which by default is the policy belonging to the service referred to by "serviceResource" in the dialog.
        /// <br/>            
        /// <br/>Can also be used to refer to other service policies.
        /// </summary>

        [JsonPropertyName("authorizationAttribute")]
        public string AuthorizationAttribute { get; set; }

        /// <summary>
        /// Whether the user, if supplied in the query, is authorized to perform the action.
        /// </summary>

        [JsonPropertyName("isAuthorized")]
        public bool? IsAuthorized { get; set; }

        /// <summary>
        /// Indicates whether the action results in the dialog being deleted. Used by frontends to implement custom UX
        /// <br/>for delete actions.
        /// </summary>

        [JsonPropertyName("isDeleteDialogAction")]
        public bool IsDeleteDialogAction { get; set; }

        /// <summary>
        /// Indicates a priority for the action, making it possible for frontends to adapt GUI elements based on action
        /// <br/>priority.
        /// </summary>

        [JsonPropertyName("priority")]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public DialogGuiActionPriority_Values Priority { get; set; }

        /// <summary>
        /// The HTTP method that the frontend should use when redirecting the user.
        /// </summary>

        [JsonPropertyName("httpMethod")]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public HttpVerb_Values HttpMethod { get; set; }

        /// <summary>
        /// The title of the action, this should be short and in verb form.
        /// </summary>

        [JsonPropertyName("title")]
        public ICollection<LocalizationDto> Title { get; set; }

        /// <summary>
        /// If there should be a prompt asking the user for confirmation before the action is executed,
        /// <br/>this field should contain the prompt text.
        /// </summary>

        [JsonPropertyName("prompt")]
        public ICollection<LocalizationDto> Prompt { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetDialogDialogApiActionDtoSO
    {
        /// <summary>
        /// The unique identifier for the action in UUIDv7 format.
        /// </summary>

        [JsonPropertyName("id")]
        public System.Guid Id { get; set; }

        /// <summary>
        /// String identifier for the action, corresponding to the "action" attributeId used in the XACML service policy,
        /// <br/>which by default is the policy belonging to the service referred to by "serviceResource" in the dialog
        /// </summary>

        [JsonPropertyName("action")]
        public string Action { get; set; }

        /// <summary>
        /// Contains an authorization resource attributeId, that can used in custom authorization rules in the XACML service
        /// <br/>policy, which by default is the policy belonging to the service referred to by "serviceResource" in the dialog.
        /// <br/>            
        /// <br/>Can also be used to refer to other service policies.
        /// </summary>

        [JsonPropertyName("authorizationAttribute")]
        public string AuthorizationAttribute { get; set; }

        /// <summary>
        /// True if the authenticated user (set in the query) is authorized for this action.
        /// </summary>

        [JsonPropertyName("isAuthorized")]
        public bool? IsAuthorized { get; set; }

        /// <summary>
        /// The endpoints associated with the action.
        /// </summary>

        [JsonPropertyName("endpoints")]
        public ICollection<GetDialogDialogApiActionEndpointDtoSO> Endpoints { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetDialogDialogApiActionEndpointDtoSO
    {
        /// <summary>
        /// The unique identifier for the endpoint in UUIDv7 format.
        /// </summary>

        [JsonPropertyName("id")]
        public System.Guid Id { get; set; }

        /// <summary>
        /// Arbitrary string indicating the version of the endpoint.
        /// <br/>            
        /// <br/>Consult the service-specific documentation provided by the service owner for details (if in use).
        /// </summary>

        [JsonPropertyName("version")]
        public string Version { get; set; }

        /// <summary>
        /// The fully qualified URL of the API endpoint.
        /// </summary>

        [JsonPropertyName("url")]
        public System.Uri Url { get; set; }

        /// <summary>
        /// The HTTP method that the endpoint expects for this action.
        /// </summary>

        [JsonPropertyName("httpMethod")]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public HttpVerb_Values HttpMethod { get; set; }

        /// <summary>
        /// Link to service provider documentation for the endpoint. Used for service owners to provide documentation for
        /// <br/>integrators. Should be a URL to a human-readable page.
        /// </summary>

        [JsonPropertyName("documentationUrl")]
        public System.Uri DocumentationUrl { get; set; }

        /// <summary>
        /// Link to the request schema for the endpoint. Used by service owners to provide documentation for integrators.
        /// <br/>Dialogporten will not validate information on this endpoint.
        /// </summary>

        [JsonPropertyName("requestSchema")]
        public System.Uri RequestSchema { get; set; }

        /// <summary>
        /// Link to the response schema for the endpoint. Used for service owners to provide documentation for integrators.
        /// <br/>Dialogporten will not validate information on this endpoint.
        /// </summary>

        [JsonPropertyName("responseSchema")]
        public System.Uri ResponseSchema { get; set; }

        /// <summary>
        /// Boolean indicating if the endpoint is deprecated. Integrators should migrate to endpoints with a higher version.
        /// </summary>

        [JsonPropertyName("deprecated")]
        public bool Deprecated { get; set; }

        /// <summary>
        /// Date and time when the service owner has indicated that endpoint will no longer function. Only set if the endpoint
        /// <br/>is deprecated. Dialogporten will not enforce this date.
        /// </summary>

        [JsonPropertyName("sunsetAt")]
        public System.DateTimeOffset? SunsetAt { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetDialogDialogActivityDtoSO
    {
        /// <summary>
        /// The unique identifier for the activity in UUIDv7 format.
        /// </summary>

        [JsonPropertyName("id")]
        public System.Guid Id { get; set; }

        /// <summary>
        /// The date and time when the activity was created.
        /// </summary>

        [JsonPropertyName("createdAt")]
        public System.DateTimeOffset? CreatedAt { get; set; }

        /// <summary>
        /// An arbitrary URI/URN with a service-specific activity type.
        /// <br/>            
        /// <br/>Consult the service-specific documentation provided by the service owner for details (if in use).
        /// </summary>

        [JsonPropertyName("extendedType")]
        public System.Uri ExtendedType { get; set; }

        /// <summary>
        /// The type of activity.
        /// </summary>

        [JsonPropertyName("type")]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public DialogActivityType_Values Type { get; set; }

        /// <summary>
        /// The related activity identifier, if applicable. Must be present in the current dialog.
        /// </summary>

        [JsonPropertyName("relatedActivityId")]
        public System.Guid? RelatedActivityId { get; set; }

        /// <summary>
        /// If the activity is related to a particular transmission, this field will contain the transmission identifier.
        /// </summary>

        [JsonPropertyName("transmissionId")]
        public System.Guid? TransmissionId { get; set; }

        /// <summary>
        /// The actor that performed the activity.
        /// </summary>

        [JsonPropertyName("performedBy")]
        public GetDialogDialogActivityPerformedByActorDtoSO PerformedBy { get; set; }

        /// <summary>
        /// Unstructured text describing the activity. Only set if the activity type is "Information".
        /// </summary>

        [JsonPropertyName("description")]
        public ICollection<LocalizationDto> Description { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetDialogDialogActivityPerformedByActorDtoSO
    {
        /// <summary>
        /// What type of actor performed the activity.
        /// </summary>

        [JsonPropertyName("actorType")]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public ActorType_Values ActorType { get; set; }

        /// <summary>
        /// The name of the person or organization that performed the activity.
        /// <br/>Only set if the actor type is "PartyRepresentative".
        /// </summary>

        [JsonPropertyName("actorName")]
        public string ActorName { get; set; }

        /// <summary>
        /// The identifier of the person or organization that performed the activity.
        /// <br/>May be omitted if ActorType is "ServiceOwner".
        /// </summary>

        [JsonPropertyName("actorId")]
        public string ActorId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetDialogDialogSeenLogDtoSO
    {
        /// <summary>
        /// The unique identifier for the seen log entry in UUIDv7 format.
        /// </summary>

        [JsonPropertyName("id")]
        public System.Guid Id { get; set; }

        /// <summary>
        /// The timestamp when the dialog revision was seen
        /// </summary>

        [JsonPropertyName("seenAt")]
        public System.DateTimeOffset SeenAt { get; set; }

        /// <summary>
        /// The actor that saw the dialog revision
        /// </summary>

        [JsonPropertyName("seenBy")]
        public GetDialogDialogSeenLogSeenByActorDtoSO SeenBy { get; set; }

        /// <summary>
        /// Flag indicating whether the seen log entry was created via the service owner.
        /// <br/>            
        /// <br/>This is used when the service owner uses the service owner API to implement its own frontend.
        /// </summary>

        [JsonPropertyName("isViaServiceOwner")]
        public bool? IsViaServiceOwner { get; set; }

        /// <summary>
        /// Flag indicating whether the seen log entry was created by the current end user, if provided in the query
        /// </summary>

        [JsonPropertyName("isCurrentEndUser")]
        public bool IsCurrentEndUser { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetDialogDialogSeenLogSeenByActorDtoSO
    {
        /// <summary>
        /// The natural name of the person/business that saw the dialog revision.
        /// </summary>

        [JsonPropertyName("actorName")]
        public string ActorName { get; set; }

        /// <summary>
        /// The identifier of the person/business that saw the dialog revision.
        /// </summary>

        [JsonPropertyName("actorId")]
        public string ActorId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateDialogCommand
    {
        /// <summary>
        /// A self-defined UUIDv7 may be provided in order to support idempotent creation of dialogs. If not provided, a new UUIDv7 will be generated.
        /// </summary>

        [JsonPropertyName("id")]
        public System.Guid? Id { get; set; }

        /// <summary>
        /// The service identifier for the service that the dialog is related to in URN-format.
        /// <br/>This corresponds to a resource in the Altinn Resource Registry, which the authenticated organization
        /// <br/>must own, i.e., be listed as the "competent authority" in the Resource Registry entry.
        /// </summary>

        [JsonPropertyName("serviceResource")]
        public string ServiceResource { get; set; }

        /// <summary>
        /// The party code representing the organization or person that the dialog belongs to in URN format
        /// </summary>

        [JsonPropertyName("party")]
        public string Party { get; set; }

        /// <summary>
        /// Advisory indicator of progress, represented as 1-100 percentage value. 100% representing a dialog that has come
        /// <br/>to a natural completion (successful or not).
        /// </summary>

        [JsonPropertyName("progress")]
        public int? Progress { get; set; }

        /// <summary>
        /// Arbitrary string with a service-specific indicator of status, typically used to indicate a fine-grained state of
        /// <br/>the dialog to further specify the "status" enum.
        /// </summary>

        [JsonPropertyName("extendedStatus")]
        public string ExtendedStatus { get; set; }

        /// <summary>
        /// Arbitrary string with a service-specific reference to an external system or service.
        /// </summary>

        [JsonPropertyName("externalReference")]
        public string ExternalReference { get; set; }

        /// <summary>
        /// The timestamp when the dialog should be made visible for authorized end users. If not provided, the dialog will be
        /// <br/>immediately available.
        /// </summary>

        [JsonPropertyName("visibleFrom")]
        public System.DateTimeOffset? VisibleFrom { get; set; }

        /// <summary>
        /// The due date for the dialog. Dialogs past due date might be marked as such in frontends but will still be available.
        /// </summary>

        [JsonPropertyName("dueAt")]
        public System.DateTimeOffset? DueAt { get; set; }

        /// <summary>
        /// Optional process identifier used to indicate a business process this dialog belongs to 
        /// </summary>

        [JsonPropertyName("process")]
        public string Process { get; set; }

        /// <summary>
        /// Optional preceding process identifier to indicate the business process that preceded the process indicated in the "Process" field. Cannot be set without also "Process" being set.
        /// </summary>

        [JsonPropertyName("precedingProcess")]
        public string PrecedingProcess { get; set; }

        /// <summary>
        /// The expiration date for the dialog. This is the last date when the dialog is available for the end user.
        /// <br/>            
        /// <br/>After this date is passed, the dialog will be considered expired and no longer available for the end user in any
        /// <br/>API. If not supplied, the dialog will be considered to never expire. This field can be changed after creation.
        /// </summary>

        [JsonPropertyName("expiresAt")]
        public System.DateTimeOffset? ExpiresAt { get; set; }

        /// <summary>
        /// If set, will override the date and time when the dialog is set as created
        /// <br/>If not supplied, the current date /time will be used.
        /// </summary>

        [JsonPropertyName("createdAt")]
        public System.DateTimeOffset CreatedAt { get; set; }

        /// <summary>
        /// If set, will override the date and time when the dialog is set as last updated
        /// <br/>If not supplied, the current date /time will be used.
        /// </summary>

        [JsonPropertyName("updatedAt")]
        public System.DateTimeOffset UpdatedAt { get; set; }

        /// <summary>
        /// The aggregated status of the dialog.
        /// </summary>

        [JsonPropertyName("status")]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public DialogStatus_Values Status { get; set; }

        /// <summary>
        /// The dialog unstructured text content
        /// </summary>

        [JsonPropertyName("content")]
        public CreateDialogContentDto Content { get; set; }

        /// <summary>
        /// A list of words (tags) that will be used in dialog search queries. Not visible in end-user DTO.
        /// </summary>

        [JsonPropertyName("searchTags")]
        public ICollection<CreateDialogSearchTagDto> SearchTags { get; set; }

        /// <summary>
        /// The attachments associated with the dialog (on an aggregate level)
        /// </summary>

        [JsonPropertyName("attachments")]
        public ICollection<CreateDialogDialogAttachmentDto> Attachments { get; set; }

        /// <summary>
        /// The immutable list of transmissions associated with the dialog
        /// </summary>

        [JsonPropertyName("transmissions")]
        public ICollection<CreateDialogDialogTransmissionDto> Transmissions { get; set; }

        /// <summary>
        /// The GUI actions associated with the dialog. Should be used in browser-based interactive frontends.
        /// </summary>

        [JsonPropertyName("guiActions")]
        public ICollection<CreateDialogDialogGuiActionDto> GuiActions { get; set; }

        /// <summary>
        /// The API actions associated with the dialog. Should be used in specialized, non-browser-based integrations.
        /// </summary>

        [JsonPropertyName("apiActions")]
        public ICollection<CreateDialogDialogApiActionDto> ApiActions { get; set; }

        /// <summary>
        /// An immutable list of activities associated with the dialog.
        /// </summary>

        [JsonPropertyName("activities")]
        public ICollection<CreateDialogDialogActivityDto> Activities { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateDialogContentDto
    {
        /// <summary>
        /// The title of the dialog. Must be text/plain.
        /// </summary>

        [JsonPropertyName("title")]
        public ContentValueDto Title { get; set; }

        /// <summary>
        /// A short summary of the dialog and its current state. Must be text/plain.
        /// </summary>

        [JsonPropertyName("summary")]
        public ContentValueDto Summary { get; set; }

        /// <summary>
        /// Overridden sender name. If not supplied, assume "org" as the sender name. Must be text/plain if supplied.
        /// </summary>

        [JsonPropertyName("senderName")]
        public ContentValueDto SenderName { get; set; }

        /// <summary>
        /// Additional information about the dialog, this may contain Markdown.
        /// </summary>

        [JsonPropertyName("additionalInfo")]
        public ContentValueDto AdditionalInfo { get; set; }

        /// <summary>
        /// Used as the human-readable label used to describe the "ExtendedStatus" field. Must be text/plain.
        /// </summary>

        [JsonPropertyName("extendedStatus")]
        public ContentValueDto ExtendedStatus { get; set; }

        /// <summary>
        /// Front-channel embedded content. Used to dynamically embed content in the frontend from an external URL.
        /// </summary>

        [JsonPropertyName("mainContentReference")]
        public ContentValueDto MainContentReference { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateDialogSearchTagDto
    {
        /// <summary>
        /// A search tag value.
        /// </summary>

        [JsonPropertyName("value")]
        public string Value { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateDialogDialogAttachmentDto
    {
        /// <summary>
        /// The display name of the attachment that should be used in GUIs.
        /// </summary>

        [JsonPropertyName("displayName")]
        public ICollection<LocalizationDto> DisplayName { get; set; }

        /// <summary>
        /// The URLs associated with the attachment, each referring to a different representation of the attachment.
        /// </summary>

        [JsonPropertyName("urls")]
        public ICollection<CreateDialogDialogAttachmentUrlDto> Urls { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateDialogDialogAttachmentUrlDto
    {
        /// <summary>
        /// The fully qualified URL of the attachment.
        /// </summary>

        [JsonPropertyName("url")]
        public System.Uri Url { get; set; }

        /// <summary>
        /// The media type of the attachment.
        /// </summary>

        [JsonPropertyName("mediaType")]
        public string MediaType { get; set; }

        /// <summary>
        /// The type of consumer the URL is intended for.
        /// </summary>

        [JsonPropertyName("consumerType")]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public AttachmentUrlConsumerType_Values ConsumerType { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateDialogDialogTransmissionDto
    {
        /// <summary>
        /// A self-defined UUIDv7 may be provided in order to support idempotent creation of transmissions. If not provided, a new UUIDv7 will be generated.
        /// </summary>

        [JsonPropertyName("id")]
        public System.Guid? Id { get; set; }

        /// <summary>
        /// If supplied, overrides the creating date and time for the transmission
        /// <br/>If not supplied, the current date /time will be used.
        /// </summary>

        [JsonPropertyName("createdAt")]
        public System.DateTimeOffset CreatedAt { get; set; }

        /// <summary>
        /// Contains an authorization resource attributeId, that can used in custom authorization rules in the XACML service
        /// <br/>policy, which by default is the policy belonging to the service referred to by "serviceResource" in the dialog.
        /// <br/>            
        /// <br/>Can also be used to refer to other service policies.
        /// </summary>

        [JsonPropertyName("authorizationAttribute")]
        public string AuthorizationAttribute { get; set; }

        /// <summary>
        /// Arbitrary URI/URN describing a service-specific transmission type.
        /// <br/>            
        /// <br/>Refer to the service-specific documentation provided by the service owner for details (if in use).
        /// </summary>

        [JsonPropertyName("extendedType")]
        public System.Uri ExtendedType { get; set; }

        /// <summary>
        /// Reference to any other transmission that this transmission is related to.
        /// </summary>

        [JsonPropertyName("relatedTransmissionId")]
        public System.Guid? RelatedTransmissionId { get; set; }

        /// <summary>
        /// The type of transmission.
        /// </summary>

        [JsonPropertyName("type")]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public DialogTransmissionType_Values Type { get; set; }

        /// <summary>
        /// The actor that sent the transmission.
        /// </summary>

        [JsonPropertyName("sender")]
        public CreateDialogDialogTransmissionSenderActorDto Sender { get; set; }

        /// <summary>
        /// The transmission unstructured text content
        /// </summary>

        [JsonPropertyName("content")]
        public CreateDialogDialogTransmissionContentDto Content { get; set; }

        /// <summary>
        /// The transmission-level attachments
        /// </summary>

        [JsonPropertyName("attachments")]
        public ICollection<CreateDialogTransmissionAttachmentDto> Attachments { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateDialogDialogTransmissionSenderActorDto
    {
        /// <summary>
        /// The type of actor that sent the transmission.
        /// </summary>

        [JsonPropertyName("actorType")]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public ActorType_Values ActorType { get; set; }

        /// <summary>
        /// Specifies the name of the entity that sent the transmission. Mutually exclusive with ActorId. If ActorId
        /// <br/>is supplied, the name will be automatically populated from the name registries.
        /// </summary>

        [JsonPropertyName("actorName")]
        public string ActorName { get; set; }

        /// <summary>
        /// The identifier of the person or organization that sent the transmission. Mutually exclusive with ActorName.
        /// <br/>Might be omitted if ActorType is "ServiceOwner".
        /// </summary>

        [JsonPropertyName("actorId")]
        public string ActorId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateDialogDialogTransmissionContentDto
    {
        /// <summary>
        /// The transmission title. Must be text/plain.
        /// </summary>

        [JsonPropertyName("title")]
        public ContentValueDto Title { get; set; }

        /// <summary>
        /// The transmission summary.
        /// </summary>

        [JsonPropertyName("summary")]
        public ContentValueDto Summary { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateDialogTransmissionAttachmentDto
    {
        /// <summary>
        /// The display name of the attachment that should be used in GUIs.
        /// </summary>

        [JsonPropertyName("displayName")]
        public ICollection<LocalizationDto> DisplayName { get; set; }

        /// <summary>
        /// The URLs associated with the attachment, each referring to a different representation of the attachment.
        /// </summary>

        [JsonPropertyName("urls")]
        public ICollection<CreateDialogTransmissionAttachmentUrlDto> Urls { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateDialogTransmissionAttachmentUrlDto
    {
        /// <summary>
        /// The fully qualified URL of the attachment.
        /// </summary>

        [JsonPropertyName("url")]
        public System.Uri Url { get; set; }

        /// <summary>
        /// The media type of the attachment.
        /// </summary>

        [JsonPropertyName("mediaType")]
        public string MediaType { get; set; }

        /// <summary>
        /// The type of consumer the URL is intended for.
        /// </summary>

        [JsonPropertyName("consumerType")]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public AttachmentUrlConsumerType_Values ConsumerType { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateDialogDialogGuiActionDto
    {
        /// <summary>
        /// The action identifier for the action, corresponding to the "action" attributeId used in the XACML service policy,
        /// </summary>

        [JsonPropertyName("action")]
        public string Action { get; set; }

        /// <summary>
        /// The fully qualified URL of the action, to which the user will be redirected when the action is triggered. Will be set to
        /// <br/>"urn:dialogporten:unauthorized" if the user is not authorized to perform the action.
        /// </summary>

        [JsonPropertyName("url")]
        public System.Uri Url { get; set; }

        /// <summary>
        /// Contains an authorization resource attributeId, that can used in custom authorization rules in the XACML service
        /// <br/>policy, which by default is the policy belonging to the service referred to by "serviceResource" in the dialog.
        /// <br/>            
        /// <br/>Can also be used to refer to other service policies.
        /// </summary>

        [JsonPropertyName("authorizationAttribute")]
        public string AuthorizationAttribute { get; set; }

        /// <summary>
        /// Indicates whether the action results in the dialog being deleted. Used by frontends to implement custom UX
        /// <br/>for delete actions.
        /// </summary>

        [JsonPropertyName("isDeleteDialogAction")]
        public bool IsDeleteDialogAction { get; set; }

        /// <summary>
        /// The HTTP method that the frontend should use when redirecting the user.
        /// </summary>

        [JsonPropertyName("httpMethod")]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public HttpVerb_Values? HttpMethod { get; set; }

        /// <summary>
        /// Indicates a priority for the action, making it possible for frontends to adapt GUI elements based on action
        /// <br/>priority.
        /// </summary>

        [JsonPropertyName("priority")]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public DialogGuiActionPriority_Values Priority { get; set; }

        /// <summary>
        /// The title of the action, this should be short and in verb form. Must be text/plain.
        /// </summary>

        [JsonPropertyName("title")]
        public ICollection<LocalizationDto> Title { get; set; }

        /// <summary>
        /// If there should be a prompt asking the user for confirmation before the action is executed,
        /// <br/>this field should contain the prompt text.
        /// </summary>

        [JsonPropertyName("prompt")]
        public ICollection<LocalizationDto> Prompt { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateDialogDialogApiActionDto
    {
        /// <summary>
        /// String identifier for the action, corresponding to the "action" attributeId used in the XACML service policy,
        /// <br/>which by default is the policy belonging to the service referred to by "serviceResource" in the dialog
        /// </summary>

        [JsonPropertyName("action")]
        public string Action { get; set; }

        /// <summary>
        /// Contains an authorization resource attributeId, that can used in custom authorization rules in the XACML service
        /// <br/>policy, which by default is the policy belonging to the service referred to by "serviceResource" in the dialog.
        /// <br/>            
        /// <br/>Can also be used to refer to other service policies.
        /// </summary>

        [JsonPropertyName("authorizationAttribute")]
        public string AuthorizationAttribute { get; set; }

        /// <summary>
        /// The endpoints associated with the action.
        /// </summary>

        [JsonPropertyName("endpoints")]
        public ICollection<CreateDialogDialogApiActionEndpointDto> Endpoints { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateDialogDialogApiActionEndpointDto
    {
        /// <summary>
        /// Arbitrary string indicating the version of the endpoint.
        /// </summary>

        [JsonPropertyName("version")]
        public string Version { get; set; }

        /// <summary>
        /// The fully qualified URL of the API endpoint.
        /// </summary>

        [JsonPropertyName("url")]
        public System.Uri Url { get; set; }

        /// <summary>
        /// The HTTP method that the endpoint expects for this action.
        /// </summary>

        [JsonPropertyName("httpMethod")]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public HttpVerb_Values HttpMethod { get; set; }

        /// <summary>
        /// Link to documentation for the endpoint, providing documentation for integrators. Should be a URL to a
        /// <br/>human-readable page.
        /// </summary>

        [JsonPropertyName("documentationUrl")]
        public System.Uri DocumentationUrl { get; set; }

        /// <summary>
        /// Link to the request schema for the endpoint. Used to provide documentation for integrators.
        /// <br/>Dialogporten will not validate information on this endpoint.
        /// </summary>

        [JsonPropertyName("requestSchema")]
        public System.Uri RequestSchema { get; set; }

        /// <summary>
        /// Link to the response schema for the endpoint. Used to provide documentation for integrators.
        /// <br/>Dialogporten will not validate information on this endpoint.
        /// </summary>

        [JsonPropertyName("responseSchema")]
        public System.Uri ResponseSchema { get; set; }

        /// <summary>
        /// Boolean indicating if the endpoint is deprecated.
        /// </summary>

        [JsonPropertyName("deprecated")]
        public bool Deprecated { get; set; }

        /// <summary>
        /// Date and time when the endpoint will no longer function. Only set if the endpoint is deprecated. Dialogporten
        /// <br/>will not enforce this date.
        /// </summary>

        [JsonPropertyName("sunsetAt")]
        public System.DateTimeOffset? SunsetAt { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateDialogDialogActivityDto
    {
        /// <summary>
        /// A self-defined UUIDv7 may be provided in order to support idempotent creation of activities. If not provided, a new UUIDv7 will be generated.
        /// </summary>

        [JsonPropertyName("id")]
        public System.Guid? Id { get; set; }

        /// <summary>
        /// If supplied, overrides the creating date and time for the transmission.
        /// <br/>If not supplied, the current date /time will be used.
        /// </summary>

        [JsonPropertyName("createdAt")]
        public System.DateTimeOffset? CreatedAt { get; set; }

        /// <summary>
        /// Arbitrary URI/URN describing a service-specific transmission type.
        /// </summary>

        [JsonPropertyName("extendedType")]
        public System.Uri ExtendedType { get; set; }

        /// <summary>
        /// The type of transmission.
        /// </summary>

        [JsonPropertyName("type")]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public DialogActivityType_Values Type { get; set; }

        /// <summary>
        /// The related activity identifier, if applicable. Must be present in the request body.
        /// </summary>

        [JsonPropertyName("relatedActivityId")]
        public System.Guid? RelatedActivityId { get; set; }

        /// <summary>
        /// If the activity is related to a particular transmission, this field will contain the transmission identifier.
        /// <br/>Must be present in the request body.
        /// </summary>

        [JsonPropertyName("transmissionId")]
        public System.Guid? TransmissionId { get; set; }

        /// <summary>
        /// The actor that performed the activity.
        /// </summary>

        [JsonPropertyName("performedBy")]
        public CreateDialogDialogActivityPerformedByActorDto PerformedBy { get; set; }

        /// <summary>
        /// Unstructured text describing the activity. Only set if the activity type is "Information".
        /// </summary>

        [JsonPropertyName("description")]
        public ICollection<LocalizationDto> Description { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateDialogDialogActivityPerformedByActorDto
    {
        /// <summary>
        /// What type of actor performed the activity.
        /// </summary>

        [JsonPropertyName("actorType")]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public ActorType_Values ActorType { get; set; }

        /// <summary>
        /// Specifies the name of the entity that performed the activity. Mutually exclusive with ActorId. If ActorId
        /// <br/>is supplied, the name will be automatically populated from the name registries.
        /// </summary>

        [JsonPropertyName("actorName")]
        public string ActorName { get; set; }

        /// <summary>
        /// The identifier of the person or organization that performed the activity. Mutually exclusive with ActorName.
        /// <br/>Might be omitted if ActorType is "ServiceOwner".
        /// </summary>

        [JsonPropertyName("actorId")]
        public string ActorId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateDialogActivityRequest
    {
        /// <summary>
        /// The UUDIv7 of the action may be provided to support idempotent additions to the list of activities.
        /// <br/>If not supplied, a new UUIDv7 will be generated.
        /// </summary>

        [JsonPropertyName("id")]
        public System.Guid? Id { get; set; }

        /// <summary>
        /// If supplied, overrides the creating date and time for the transmission.
        /// <br/>If not supplied, the current date /time will be used.
        /// </summary>

        [JsonPropertyName("createdAt")]
        public System.DateTimeOffset? CreatedAt { get; set; }

        /// <summary>
        /// Arbitrary URI/URN describing a service-specific transmission type.
        /// </summary>

        [JsonPropertyName("extendedType")]
        public System.Uri ExtendedType { get; set; }

        /// <summary>
        /// The type of transmission.
        /// </summary>

        [JsonPropertyName("type")]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public DialogActivityType_Values Type { get; set; }

        /// <summary>
        /// The related activity identifier, if applicable. Must be present in the request body.
        /// </summary>

        [JsonPropertyName("relatedActivityId")]
        public System.Guid? RelatedActivityId { get; set; }

        /// <summary>
        /// If the activity is related to a particular transmission, this field will contain the transmission identifier.
        /// <br/>Must be present in the request body.
        /// </summary>

        [JsonPropertyName("transmissionId")]
        public System.Guid? TransmissionId { get; set; }

        /// <summary>
        /// The actor that performed the activity.
        /// </summary>

        [JsonPropertyName("performedBy")]
        public UpdateDialogDialogActivityPerformedByActorDto PerformedBy { get; set; }

        /// <summary>
        /// Unstructured text describing the activity. Only set if the activity type is "Information".
        /// </summary>

        [JsonPropertyName("description")]
        public ICollection<LocalizationDto> Description { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum NotificationConditionType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"NotExists")]
        NotExists = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Exists")]
        Exists = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetPartiesDto
    {

        [JsonPropertyName("authorizedParties")]
        public ICollection<AuthorizedPartyDto> AuthorizedParties { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AuthorizedPartyDto
    {

        [JsonPropertyName("party")]
        public string Party { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("partyType")]
        public string PartyType { get; set; }

        [JsonPropertyName("isDeleted")]
        public bool IsDeleted { get; set; }

        [JsonPropertyName("hasKeyRole")]
        public bool HasKeyRole { get; set; }

        [JsonPropertyName("isCurrentEndUser")]
        public bool IsCurrentEndUser { get; set; }

        [JsonPropertyName("isMainAdministrator")]
        public bool IsMainAdministrator { get; set; }

        [JsonPropertyName("isAccessManager")]
        public bool IsAccessManager { get; set; }

        [JsonPropertyName("hasOnlyAccessToSubParties")]
        public bool HasOnlyAccessToSubParties { get; set; }

        [JsonPropertyName("subParties")]
        public ICollection<AuthorizedPartyDto> SubParties { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SearchDialogSeenLogDto
    {

        [JsonPropertyName("id")]
        public System.Guid Id { get; set; }

        [JsonPropertyName("seenAt")]
        public System.DateTimeOffset SeenAt { get; set; }

        [JsonPropertyName("seenBy")]
        public SearchDialogSeenLogSeenByActorDto SeenBy { get; set; }

        [JsonPropertyName("isViaServiceOwner")]
        public bool IsViaServiceOwner { get; set; }

        [JsonPropertyName("isCurrentEndUser")]
        public bool IsCurrentEndUser { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SearchDialogSeenLogSeenByActorDto
    {

        [JsonPropertyName("id")]
        public System.Guid Id { get; set; }

        [JsonPropertyName("actorName")]
        public string ActorName { get; set; }

        [JsonPropertyName("actorId")]
        public string ActorId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetDialogSeenLogDto
    {

        [JsonPropertyName("id")]
        public System.Guid Id { get; set; }

        [JsonPropertyName("seenAt")]
        public System.DateTimeOffset SeenAt { get; set; }

        [JsonPropertyName("seenBy")]
        public GetDialogSeenLogSeenByActorDto SeenBy { get; set; }

        [JsonPropertyName("isViaServiceOwner")]
        public bool IsViaServiceOwner { get; set; }

        [JsonPropertyName("isCurrentEndUser")]
        public bool IsCurrentEndUser { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetDialogSeenLogSeenByActorDto
    {

        [JsonPropertyName("id")]
        public System.Guid Id { get; set; }

        [JsonPropertyName("actorName")]
        public string ActorName { get; set; }

        [JsonPropertyName("actorId")]
        public string ActorId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PaginatedListOfSearchDialogDto
    {
        /// <summary>
        /// The paginated list of items
        /// </summary>

        [JsonPropertyName("items")]
        public ICollection<SearchDialogDto> Items { get; set; }

        /// <summary>
        /// Whether there are more items available that can be fetched by supplying the continuation token
        /// </summary>

        [JsonPropertyName("hasNextPage")]
        public bool HasNextPage { get; set; }

        /// <summary>
        /// The continuation token to be used to fetch the next page of items
        /// </summary>

        [JsonPropertyName("continuationToken")]
        public string ContinuationToken { get; set; }

        /// <summary>
        /// The current sorting order of the items
        /// </summary>

        [JsonPropertyName("orderBy")]
        public string OrderBy { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SearchDialogDto
    {
        /// <summary>
        /// The unique identifier for the dialog in UUIDv7 format.
        /// </summary>

        [JsonPropertyName("id")]
        public System.Guid Id { get; set; }

        /// <summary>
        /// The service owner code representing the organization (service owner) related to this dialog.
        /// </summary>

        [JsonPropertyName("org")]
        public string Org { get; set; }

        /// <summary>
        /// The service identifier for the service that the dialog is related to in URN-format.
        /// <br/>This corresponds to a service resource in the Altinn Resource Registry.
        /// </summary>

        [JsonPropertyName("serviceResource")]
        public string ServiceResource { get; set; }

        /// <summary>
        /// The ServiceResource type, as defined in Altinn Resource Registry (see ResourceType)
        /// </summary>

        [JsonPropertyName("serviceResourceType")]
        public string ServiceResourceType { get; set; }

        /// <summary>
        /// The party code representing the organization or person that the dialog belongs to in URN format
        /// </summary>

        [JsonPropertyName("party")]
        public string Party { get; set; }

        /// <summary>
        /// Advisory indicator of progress, represented as 1-100 percentage value. 100% representing a dialog that has come
        /// <br/>to a natural completion (successful or not).
        /// </summary>

        [JsonPropertyName("progress")]
        public int? Progress { get; set; }

        /// <summary>
        /// Optional process identifier used to indicate a business process this dialog belongs to 
        /// </summary>

        [JsonPropertyName("process")]
        public string Process { get; set; }

        /// <summary>
        /// Optional preceding process identifier to indicate the business process that preceded the process indicated in the "Process" field. Cannot be set without also "Process" being set. 
        /// </summary>

        [JsonPropertyName("precedingProcess")]
        public string PrecedingProcess { get; set; }

        /// <summary>
        /// The number of attachments in the dialog made available for browser-based frontends.
        /// </summary>

        [JsonPropertyName("guiAttachmentCount")]
        public int? GuiAttachmentCount { get; set; }

        /// <summary>
        /// Arbitrary string with a service-specific indicator of status, typically used to indicate a fine-grained state of
        /// <br/>the dialog to further specify the "status" enum.
        /// <br/>            
        /// <br/>Refer to the service-specific documentation provided by the service owner for details on the possible values (if
        /// <br/>in use).
        /// </summary>

        [JsonPropertyName("extendedStatus")]
        public string ExtendedStatus { get; set; }

        /// <summary>
        /// The date and time when the dialog was created.
        /// </summary>

        [JsonPropertyName("createdAt")]
        public System.DateTimeOffset CreatedAt { get; set; }

        /// <summary>
        /// The date and time when the dialog was last updated.
        /// </summary>

        [JsonPropertyName("updatedAt")]
        public System.DateTimeOffset UpdatedAt { get; set; }

        /// <summary>
        /// The due date for the dialog. This is the last date when the dialog is expected to be completed.
        /// </summary>

        [JsonPropertyName("dueAt")]
        public System.DateTimeOffset? DueAt { get; set; }

        /// <summary>
        /// The aggregated status of the dialog.
        /// </summary>

        [JsonPropertyName("status")]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public DialogStatus_Values Status { get; set; }

        /// <summary>
        /// The latest entry in the dialog's activity log.
        /// </summary>

        [JsonPropertyName("latestActivity")]
        public SearchDialogDialogActivityDto LatestActivity { get; set; }

        /// <summary>
        /// The list of seen log entries for the dialog newer than the dialog ChangedAt date.
        /// </summary>

        [JsonPropertyName("seenSinceLastUpdate")]
        public ICollection<SearchDialogDialogSeenLogDto> SeenSinceLastUpdate { get; set; }

        /// <summary>
        /// The content of the dialog in search results
        /// </summary>

        [JsonPropertyName("content")]
        public SearchDialogContentDto Content { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SearchDialogDialogActivityDto
    {
        /// <summary>
        /// The unique identifier for the activity in UUIDv7 format.
        /// </summary>

        [JsonPropertyName("id")]
        public System.Guid Id { get; set; }

        /// <summary>
        /// The date and time when the activity was created.
        /// </summary>

        [JsonPropertyName("createdAt")]
        public System.DateTimeOffset? CreatedAt { get; set; }

        /// <summary>
        /// An arbitrary string with a service-specific activity type.
        /// <br/>            
        /// <br/>Consult the service-specific documentation provided by the service owner for details (if in use).
        /// </summary>

        [JsonPropertyName("extendedType")]
        public System.Uri ExtendedType { get; set; }

        /// <summary>
        /// The type of activity.
        /// </summary>

        [JsonPropertyName("type")]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public DialogActivityType_Values Type { get; set; }

        /// <summary>
        /// The related activity identifier, if applicable. Must be present in the current dialog.
        /// </summary>

        [JsonPropertyName("relatedActivityId")]
        public System.Guid? RelatedActivityId { get; set; }

        /// <summary>
        /// If the activity is related to a particular transmission, this field will contain the transmission identifier.
        /// </summary>

        [JsonPropertyName("transmissionId")]
        public System.Guid? TransmissionId { get; set; }

        /// <summary>
        /// The actor that performed the activity.
        /// </summary>

        [JsonPropertyName("performedBy")]
        public SearchDialogDialogActivityPerformedByActorDto PerformedBy { get; set; }

        /// <summary>
        /// Unstructured text describing the activity. Only set if the activity type is "Information".
        /// </summary>

        [JsonPropertyName("description")]
        public ICollection<LocalizationDto> Description { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SearchDialogDialogActivityPerformedByActorDto
    {
        /// <summary>
        /// What type of actor performed the activity.
        /// </summary>

        [JsonPropertyName("actorType")]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public ActorType_Values ActorType { get; set; }

        /// <summary>
        /// The name of the person or organization that performed the activity.
        /// <br/>Only set if the actor type is "PartyRepresentative".
        /// </summary>

        [JsonPropertyName("actorName")]
        public string ActorName { get; set; }

        /// <summary>
        /// The identifier of the person or organization that performed the activity.
        /// <br/>May be omitted if ActorType is "ServiceOwner".
        /// </summary>

        [JsonPropertyName("actorId")]
        public string ActorId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SearchDialogDialogSeenLogDto
    {
        /// <summary>
        /// The unique identifier for the seen log entry in UUIDv7 format.
        /// </summary>

        [JsonPropertyName("id")]
        public System.Guid Id { get; set; }

        /// <summary>
        /// The timestamp when the dialog revision was seen
        /// </summary>

        [JsonPropertyName("seenAt")]
        public System.DateTimeOffset SeenAt { get; set; }

        /// <summary>
        /// The actor that saw the dialog revision
        /// </summary>

        [JsonPropertyName("seenBy")]
        public SearchDialogDialogSeenLogSeenByActorDto SeenBy { get; set; }

        /// <summary>
        /// Flag indicating whether the seen log entry was created via the service owner.
        /// <br/>            
        /// <br/>This is used when the service owner uses the service owner API to implement its own frontend.
        /// </summary>

        [JsonPropertyName("isViaServiceOwner")]
        public bool? IsViaServiceOwner { get; set; }

        /// <summary>
        /// Flag indicating whether the seen log entry was created by the current end user.
        /// </summary>

        [JsonPropertyName("isCurrentEndUser")]
        public bool IsCurrentEndUser { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SearchDialogDialogSeenLogSeenByActorDto
    {
        /// <summary>
        /// The natural name of the person/business that saw the dialog revision.
        /// </summary>

        [JsonPropertyName("actorName")]
        public string ActorName { get; set; }

        /// <summary>
        /// The identifier of the person/business that saw the dialog revision.
        /// </summary>

        [JsonPropertyName("actorId")]
        public string ActorId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SearchDialogContentDto
    {
        /// <summary>
        /// The title of the dialog.
        /// </summary>

        [JsonPropertyName("title")]
        public ContentValueDto Title { get; set; }

        /// <summary>
        /// A short summary of the dialog and its current state.
        /// </summary>

        [JsonPropertyName("summary")]
        public ContentValueDto Summary { get; set; }

        /// <summary>
        /// Overridden sender name. If not supplied, assume "org" as the sender name.
        /// </summary>

        [JsonPropertyName("senderName")]
        public ContentValueDto SenderName { get; set; }

        /// <summary>
        /// Used as the human-readable label used to describe the "ExtendedStatus" field.
        /// </summary>

        [JsonPropertyName("extendedStatus")]
        public ContentValueDto ExtendedStatus { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetDialogDto
    {
        /// <summary>
        /// The unique identifier for the dialog in UUIDv7 format.
        /// </summary>

        [JsonPropertyName("id")]
        public System.Guid Id { get; set; }

        /// <summary>
        /// The unique identifier for the revision in UUIDv4 format.
        /// </summary>

        [JsonPropertyName("revision")]
        public System.Guid Revision { get; set; }

        /// <summary>
        /// The service owner code representing the organization (service owner) related to this dialog.
        /// </summary>

        [JsonPropertyName("org")]
        public string Org { get; set; }

        /// <summary>
        /// The service identifier for the service that the dialog is related to in URN-format.
        /// <br/>This corresponds to a service resource in the Altinn Resource Registry.
        /// </summary>

        [JsonPropertyName("serviceResource")]
        public string ServiceResource { get; set; }

        /// <summary>
        /// The ServiceResource type, as defined in Altinn Resource Registry (see ResourceType)
        /// </summary>

        [JsonPropertyName("serviceResourceType")]
        public string ServiceResourceType { get; set; }

        /// <summary>
        /// The party code representing the organization or person that the dialog belongs to in URN format
        /// </summary>

        [JsonPropertyName("party")]
        public string Party { get; set; }

        /// <summary>
        /// Advisory indicator of progress, represented as 1-100 percentage value. 100% representing a dialog that has come
        /// <br/>to a natural completion (successful or not).
        /// </summary>

        [JsonPropertyName("progress")]
        public int? Progress { get; set; }

        /// <summary>
        /// Optional process identifier used to indicate a business process this dialog belongs to
        /// </summary>

        [JsonPropertyName("process")]
        public string Process { get; set; }

        /// <summary>
        /// Optional preceding process identifier to indicate the business process that preceded the process indicated in the "Process" field. Cannot be set without also "Process" being set.
        /// </summary>

        [JsonPropertyName("precedingProcess")]
        public string PrecedingProcess { get; set; }

        /// <summary>
        /// Arbitrary string with a service-specific indicator of status, typically used to indicate a fine-grained state of
        /// <br/>the dialog to further specify the "status" enum.
        /// <br/>            
        /// <br/>Refer to the service-specific documentation provided by the service owner for details on the possible values (if
        /// <br/>in use).
        /// </summary>

        [JsonPropertyName("extendedStatus")]
        public string ExtendedStatus { get; set; }

        /// <summary>
        /// Arbitrary string with a service-specific reference to an external system or service.
        /// <br/>            
        /// <br/>Refer to the service-specific documentation provided by the service owner for details (if in use).
        /// </summary>

        [JsonPropertyName("externalReference")]
        public string ExternalReference { get; set; }

        /// <summary>
        /// The due date for the dialog. Dialogs past due date might be marked as such in frontends but will still be available.
        /// </summary>

        [JsonPropertyName("dueAt")]
        public System.DateTimeOffset? DueAt { get; set; }

        /// <summary>
        /// The expiration date for the dialog. This is the last date when the dialog is available for the end user.
        /// <br/>            
        /// <br/>After this date is passed, the dialog will be considered expired and no longer available for the end user in any
        /// <br/>API. If not supplied, the dialog will be considered to never expire. This field can be changed by the service
        /// <br/>owner after the dialog has been created.
        /// </summary>

        [JsonPropertyName("expiresAt")]
        public System.DateTimeOffset? ExpiresAt { get; set; }

        /// <summary>
        /// The date and time when the dialog was created.
        /// </summary>

        [JsonPropertyName("createdAt")]
        public System.DateTimeOffset CreatedAt { get; set; }

        /// <summary>
        /// The date and time when the dialog was last updated.
        /// </summary>

        [JsonPropertyName("updatedAt")]
        public System.DateTimeOffset UpdatedAt { get; set; }

        /// <summary>
        /// The aggregated status of the dialog.
        /// </summary>

        [JsonPropertyName("status")]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public DialogStatus_Values Status { get; set; }

        /// <summary>
        /// The dialog unstructured text content
        /// </summary>

        [JsonPropertyName("content")]
        public GetDialogContentDto Content { get; set; }

        /// <summary>
        /// The dialog token. May be used (if supported) against external URLs referred to in this dialog's apiActions,
        /// <br/>transmissions or attachments. Should also be used for front-channel embeds.
        /// </summary>

        [JsonPropertyName("dialogToken")]
        public string DialogToken { get; set; }

        /// <summary>
        /// The attachments associated with the dialog (on an aggregate level)
        /// </summary>

        [JsonPropertyName("attachments")]
        public ICollection<GetDialogDialogAttachmentDto> Attachments { get; set; }

        /// <summary>
        /// The immutable list of transmissions associated with the dialog
        /// </summary>

        [JsonPropertyName("transmissions")]
        public ICollection<GetDialogDialogTransmissionDto> Transmissions { get; set; }

        /// <summary>
        /// The GUI actions associated with the dialog. Should be used in browser-based interactive frontends.
        /// </summary>

        [JsonPropertyName("guiActions")]
        public ICollection<GetDialogDialogGuiActionDto> GuiActions { get; set; }

        /// <summary>
        /// The API actions associated with the dialog. Should be used in specialized, non-browser-based integrations.
        /// </summary>

        [JsonPropertyName("apiActions")]
        public ICollection<GetDialogDialogApiActionDto> ApiActions { get; set; }

        /// <summary>
        /// An immutable list of activities associated with the dialog.
        /// </summary>

        [JsonPropertyName("activities")]
        public ICollection<GetDialogDialogActivityDto> Activities { get; set; }

        /// <summary>
        /// The list of seen log entries for the dialog newer than the dialog ChangedAt date.
        /// </summary>

        [JsonPropertyName("seenSinceLastUpdate")]
        public ICollection<GetDialogDialogSeenLogDto> SeenSinceLastUpdate { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetDialogContentDto
    {
        /// <summary>
        /// The title of the dialog.
        /// </summary>

        [JsonPropertyName("title")]
        public ContentValueDto Title { get; set; }

        /// <summary>
        /// A short summary of the dialog and its current state.
        /// </summary>

        [JsonPropertyName("summary")]
        public ContentValueDto Summary { get; set; }

        /// <summary>
        /// Overridden sender name. If not supplied, assume "org" as the sender name.
        /// </summary>

        [JsonPropertyName("senderName")]
        public ContentValueDto SenderName { get; set; }

        /// <summary>
        /// Additional information about the dialog, this may contain Markdown.
        /// </summary>

        [JsonPropertyName("additionalInfo")]
        public ContentValueDto AdditionalInfo { get; set; }

        /// <summary>
        /// Used as the human-readable label used to describe the "ExtendedStatus" field.
        /// </summary>

        [JsonPropertyName("extendedStatus")]
        public ContentValueDto ExtendedStatus { get; set; }

        /// <summary>
        /// Front-channel embedded content. Used to dynamically embed content in the frontend from an external URL.
        /// </summary>

        [JsonPropertyName("mainContentReference")]
        public ContentValueDto MainContentReference { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetDialogDialogAttachmentDto
    {
        /// <summary>
        /// The unique identifier for the attachment in UUIDv7 format.
        /// </summary>

        [JsonPropertyName("id")]
        public System.Guid Id { get; set; }

        /// <summary>
        /// The display name of the attachment that should be used in GUIs.
        /// </summary>

        [JsonPropertyName("displayName")]
        public ICollection<LocalizationDto> DisplayName { get; set; }

        /// <summary>
        /// The URLs associated with the attachment, each referring to a different representation of the attachment.
        /// </summary>

        [JsonPropertyName("urls")]
        public ICollection<GetDialogDialogAttachmentUrlDto> Urls { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetDialogDialogAttachmentUrlDto
    {
        /// <summary>
        /// The unique identifier for the attachment URL in UUIDv7 format.
        /// </summary>

        [JsonPropertyName("id")]
        public System.Guid Id { get; set; }

        /// <summary>
        /// The fully qualified URL of the attachment.
        /// </summary>

        [JsonPropertyName("url")]
        public System.Uri Url { get; set; }

        /// <summary>
        /// The media type of the attachment.
        /// </summary>

        [JsonPropertyName("mediaType")]
        public string MediaType { get; set; }

        /// <summary>
        /// What type of consumer the URL is intended for.
        /// </summary>

        [JsonPropertyName("consumerType")]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public AttachmentUrlConsumerType_Values ConsumerType { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetDialogDialogTransmissionDto
    {
        /// <summary>
        /// The unique identifier for the transmission in UUIDv7 format.
        /// </summary>

        [JsonPropertyName("id")]
        public System.Guid Id { get; set; }

        /// <summary>
        /// The date and time when the transmission was created.
        /// </summary>

        [JsonPropertyName("createdAt")]
        public System.DateTimeOffset CreatedAt { get; set; }

        /// <summary>
        /// Contains an authorization resource attributeId, that can used in custom authorization rules in the XACML service
        /// <br/>policy, which by default is the policy belonging to the service referred to by "serviceResource" in the dialog.
        /// <br/>            
        /// <br/>Can also be used to refer to other service policies.
        /// </summary>

        [JsonPropertyName("authorizationAttribute")]
        public string AuthorizationAttribute { get; set; }

        /// <summary>
        /// Flag indicating if the authenticated user is authorized for this transmission. If not, embedded content and
        /// <br/>the attachments will not be available
        /// </summary>

        [JsonPropertyName("isAuthorized")]
        public bool IsAuthorized { get; set; }

        /// <summary>
        /// Arbitrary URI/URN describing a service-specific transmission type.
        /// <br/>            
        /// <br/>Refer to the service-specific documentation provided by the service owner for details (if in use).
        /// </summary>

        [JsonPropertyName("extendedType")]
        public System.Uri ExtendedType { get; set; }

        /// <summary>
        /// Reference to any other transmission that this transmission is related to.
        /// </summary>

        [JsonPropertyName("relatedTransmissionId")]
        public System.Guid? RelatedTransmissionId { get; set; }

        /// <summary>
        /// The type of transmission.
        /// </summary>

        [JsonPropertyName("type")]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public DialogTransmissionType_Values Type { get; set; }

        /// <summary>
        /// The actor that sent the transmission.
        /// </summary>

        [JsonPropertyName("sender")]
        public GetDialogDialogTransmissionSenderActorDto Sender { get; set; }

        /// <summary>
        /// The transmission unstructured text content
        /// </summary>

        [JsonPropertyName("content")]
        public GetDialogDialogTransmissionContentDto Content { get; set; }

        /// <summary>
        /// The transmission-level attachments
        /// </summary>

        [JsonPropertyName("attachments")]
        public ICollection<GetDialogTransmissionAttachmentDto> Attachments { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetDialogDialogTransmissionSenderActorDto
    {
        /// <summary>
        /// The type of actor that sent the transmission.
        /// </summary>

        [JsonPropertyName("actorType")]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public ActorType_Values ActorType { get; set; }

        /// <summary>
        /// The name of the person or organization that sent the transmission.
        /// </summary>

        [JsonPropertyName("actorName")]
        public string ActorName { get; set; }

        /// <summary>
        /// The identifier of the person or organization that sent the transmission.
        /// </summary>

        [JsonPropertyName("actorId")]
        public string ActorId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetDialogDialogTransmissionContentDto
    {
        /// <summary>
        /// The transmission title.
        /// </summary>

        [JsonPropertyName("title")]
        public ContentValueDto Title { get; set; }

        /// <summary>
        /// The transmission summary.
        /// </summary>

        [JsonPropertyName("summary")]
        public ContentValueDto Summary { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetDialogTransmissionAttachmentDto
    {
        /// <summary>
        /// The unique identifier for the attachment in UUIDv7 format.
        /// </summary>

        [JsonPropertyName("id")]
        public System.Guid Id { get; set; }

        /// <summary>
        /// The display name of the attachment that should be used in GUIs.
        /// </summary>

        [JsonPropertyName("displayName")]
        public ICollection<LocalizationDto> DisplayName { get; set; }

        /// <summary>
        /// The URLs associated with the attachment, each referring to a different representation of the attachment.
        /// </summary>

        [JsonPropertyName("urls")]
        public ICollection<GetDialogTransmissionAttachmentUrlDto> Urls { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetDialogTransmissionAttachmentUrlDto
    {
        /// <summary>
        /// The fully qualified URL of the attachment. Will be set to "urn:dialogporten:unauthorized" if the user is
        /// <br/>not authorized to access the transmission.
        /// </summary>

        [JsonPropertyName("url")]
        public System.Uri Url { get; set; }

        /// <summary>
        /// The media type of the attachment.
        /// </summary>

        [JsonPropertyName("mediaType")]
        public string MediaType { get; set; }

        /// <summary>
        /// The type of consumer the URL is intended for.
        /// </summary>

        [JsonPropertyName("consumerType")]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public AttachmentUrlConsumerType_Values ConsumerType { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetDialogDialogGuiActionDto
    {
        /// <summary>
        /// The unique identifier for the action in UUIDv7 format.
        /// </summary>

        [JsonPropertyName("id")]
        public System.Guid Id { get; set; }

        /// <summary>
        /// The action identifier for the action, corresponding to the "action" attributeId used in the XACML service policy,
        /// </summary>

        [JsonPropertyName("action")]
        public string Action { get; set; }

        /// <summary>
        /// The fully qualified URL of the action, to which the user will be redirected when the action is triggered. Will be set to
        /// <br/>"urn:dialogporten:unauthorized" if the user is not authorized to perform the action.
        /// </summary>

        [JsonPropertyName("url")]
        public System.Uri Url { get; set; }

        /// <summary>
        /// Contains an authorization resource attributeId, that can used in custom authorization rules in the XACML service
        /// <br/>policy, which by default is the policy belonging to the service referred to by "serviceResource" in the dialog.
        /// <br/>            
        /// <br/>Can also be used to refer to other service policies.
        /// </summary>

        [JsonPropertyName("authorizationAttribute")]
        public string AuthorizationAttribute { get; set; }

        /// <summary>
        /// Whether the user is authorized to perform the action.
        /// </summary>

        [JsonPropertyName("isAuthorized")]
        public bool IsAuthorized { get; set; }

        /// <summary>
        /// Indicates whether the action results in the dialog being deleted. Used by frontends to implement custom UX
        /// <br/>for delete actions.
        /// </summary>

        [JsonPropertyName("isDeleteDialogAction")]
        public bool IsDeleteDialogAction { get; set; }

        /// <summary>
        /// Indicates a priority for the action, making it possible for frontends to adapt GUI elements based on action
        /// <br/>priority.
        /// </summary>

        [JsonPropertyName("priority")]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public DialogGuiActionPriority_Values Priority { get; set; }

        /// <summary>
        /// The HTTP method that the frontend should use when redirecting the user.
        /// </summary>

        [JsonPropertyName("httpMethod")]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public HttpVerb_Values HttpMethod { get; set; }

        /// <summary>
        /// The title of the action, this should be short and in verb form.
        /// </summary>

        [JsonPropertyName("title")]
        public ICollection<LocalizationDto> Title { get; set; }

        /// <summary>
        /// If there should be a prompt asking the user for confirmation before the action is executed,
        /// <br/>this field should contain the prompt text.
        /// </summary>

        [JsonPropertyName("prompt")]
        public ICollection<LocalizationDto> Prompt { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetDialogDialogApiActionDto
    {
        /// <summary>
        /// The unique identifier for the action in UUIDv7 format.
        /// </summary>

        [JsonPropertyName("id")]
        public System.Guid Id { get; set; }

        /// <summary>
        /// String identifier for the action, corresponding to the "action" attributeId used in the XACML service policy,
        /// <br/>which by default is the policy belonging to the service referred to by "serviceResource" in the dialog
        /// </summary>

        [JsonPropertyName("action")]
        public string Action { get; set; }

        /// <summary>
        /// Contains an authorization resource attributeId, that can used in custom authorization rules in the XACML service
        /// <br/>policy, which by default is the policy belonging to the service referred to by "serviceResource" in the dialog.
        /// <br/>            
        /// <br/>Can also be used to refer to other service policies.
        /// </summary>

        [JsonPropertyName("authorizationAttribute")]
        public string AuthorizationAttribute { get; set; }

        /// <summary>
        /// True if the authenticated user is authorized for this action. If not, the action will not be available
        /// <br/>and all endpoints will be replaced with a fixed placeholder.
        /// </summary>

        [JsonPropertyName("isAuthorized")]
        public bool IsAuthorized { get; set; }

        /// <summary>
        /// The endpoints associated with the action.
        /// </summary>

        [JsonPropertyName("endpoints")]
        public ICollection<GetDialogDialogApiActionEndpointDto> Endpoints { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetDialogDialogApiActionEndpointDto
    {
        /// <summary>
        /// The unique identifier for the endpoint in UUIDv7 format.
        /// </summary>

        [JsonPropertyName("id")]
        public System.Guid Id { get; set; }

        /// <summary>
        /// Arbitrary string indicating the version of the endpoint.
        /// <br/>            
        /// <br/>Consult the service-specific documentation provided by the service owner for details (if in use).
        /// </summary>

        [JsonPropertyName("version")]
        public string Version { get; set; }

        /// <summary>
        /// The fully qualified URL of the API endpoint. Will be set to "urn:dialogporten:unauthorized" if the user is
        /// <br/>not authorized to perform the action.
        /// </summary>

        [JsonPropertyName("url")]
        public System.Uri Url { get; set; }

        /// <summary>
        /// The HTTP method that the endpoint expects for this action.
        /// </summary>

        [JsonPropertyName("httpMethod")]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public HttpVerb_Values HttpMethod { get; set; }

        /// <summary>
        /// Link to service provider documentation for the endpoint. Used for service owners to provide documentation for
        /// <br/>integrators. Should be a URL to a human-readable page.
        /// </summary>

        [JsonPropertyName("documentationUrl")]
        public System.Uri DocumentationUrl { get; set; }

        /// <summary>
        /// Link to the request schema for the endpoint. Used by service owners to provide documentation for integrators.
        /// <br/>Dialogporten will not validate information on this endpoint.
        /// </summary>

        [JsonPropertyName("requestSchema")]
        public System.Uri RequestSchema { get; set; }

        /// <summary>
        /// Link to the response schema for the endpoint. Used for service owners to provide documentation for integrators.
        /// <br/>Dialogporten will not validate information on this endpoint.
        /// </summary>

        [JsonPropertyName("responseSchema")]
        public System.Uri ResponseSchema { get; set; }

        /// <summary>
        /// Boolean indicating if the endpoint is deprecated. Integrators should migrate to endpoints with a higher version.
        /// </summary>

        [JsonPropertyName("deprecated")]
        public bool Deprecated { get; set; }

        /// <summary>
        /// Date and time when the service owner has indicated that endpoint will no longer function. Only set if the endpoint
        /// <br/>is deprecated. Dialogporten will not enforce this date.
        /// </summary>

        [JsonPropertyName("sunsetAt")]
        public System.DateTimeOffset? SunsetAt { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetDialogDialogActivityDto
    {
        /// <summary>
        /// The unique identifier for the activity in UUIDv7 format.
        /// </summary>

        [JsonPropertyName("id")]
        public System.Guid Id { get; set; }

        /// <summary>
        /// The date and time when the activity was created.
        /// </summary>

        [JsonPropertyName("createdAt")]
        public System.DateTimeOffset? CreatedAt { get; set; }

        /// <summary>
        /// An arbitrary URI/URN with a service-specific activity type.
        /// <br/>            
        /// <br/>Consult the service-specific documentation provided by the service owner for details (if in use).
        /// </summary>

        [JsonPropertyName("extendedType")]
        public System.Uri ExtendedType { get; set; }

        /// <summary>
        /// The type of activity.
        /// </summary>

        [JsonPropertyName("type")]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public DialogActivityType_Values Type { get; set; }

        /// <summary>
        /// The related activity identifier, if applicable. Must be present in the current dialog.
        /// </summary>

        [JsonPropertyName("relatedActivityId")]
        public System.Guid? RelatedActivityId { get; set; }

        /// <summary>
        /// If the activity is related to a particular transmission, this field will contain the transmission identifier.
        /// </summary>

        [JsonPropertyName("transmissionId")]
        public System.Guid? TransmissionId { get; set; }

        /// <summary>
        /// The actor that performed the activity.
        /// </summary>

        [JsonPropertyName("performedBy")]
        public GetDialogDialogActivityPerformedByActorDto PerformedBy { get; set; }

        /// <summary>
        /// Unstructured text describing the activity. Only set if the activity type is "Information".
        /// </summary>

        [JsonPropertyName("description")]
        public ICollection<LocalizationDto> Description { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetDialogDialogActivityPerformedByActorDto
    {
        /// <summary>
        /// The type of actor that performed the activity.
        /// </summary>

        [JsonPropertyName("actorType")]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public ActorType_Values ActorType { get; set; }

        /// <summary>
        /// The name of the person or organization that performed the activity.
        /// <br/>Only set if the actor type is "PartyRepresentative".
        /// </summary>

        [JsonPropertyName("actorName")]
        public string ActorName { get; set; }

        /// <summary>
        /// The identifier of the person or organization that performed the activity.
        /// <br/>May be omitted if ActorType is "ServiceOwner".
        /// </summary>

        [JsonPropertyName("actorId")]
        public string ActorId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetDialogDialogSeenLogDto
    {
        /// <summary>
        /// The unique identifier for the seen log entry in UUIDv7 format.
        /// </summary>

        [JsonPropertyName("id")]
        public System.Guid Id { get; set; }

        /// <summary>
        /// The timestamp when the dialog revision was seen
        /// </summary>

        [JsonPropertyName("seenAt")]
        public System.DateTimeOffset SeenAt { get; set; }

        /// <summary>
        /// The actor that saw the dialog revision
        /// </summary>

        [JsonPropertyName("seenBy")]
        public GetDialogDialogSeenLogSeenByActorDto SeenBy { get; set; }

        /// <summary>
        /// Flag indicating whether the seen log entry was created via the service owner.
        /// <br/>            
        /// <br/>This is used when the service owner uses the service owner API to implement its own frontend.
        /// </summary>

        [JsonPropertyName("isViaServiceOwner")]
        public bool? IsViaServiceOwner { get; set; }

        /// <summary>
        /// Flag indicating whether the seen log entry was created by the current end user.
        /// </summary>

        [JsonPropertyName("isCurrentEndUser")]
        public bool IsCurrentEndUser { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetDialogDialogSeenLogSeenByActorDto
    {
        /// <summary>
        /// The natural name of the person/business that saw the dialog revision.
        /// </summary>

        [JsonPropertyName("actorName")]
        public string ActorName { get; set; }

        /// <summary>
        /// The identifier of the person/business that saw the dialog revision.
        /// </summary>

        [JsonPropertyName("actorId")]
        public string ActorId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Operation
    {

        [JsonPropertyName("operationType")]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public OperationType OperationType { get; set; }

        [JsonPropertyName("path")]
        public string Path { get; set; }

        [JsonPropertyName("op")]
        public string Op { get; set; }

        [JsonPropertyName("from")]
        public string From { get; set; }

        [JsonPropertyName("value")]
        public object Value { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OperationType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Add")]
        Add = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Remove")]
        Remove = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Replace")]
        Replace = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Move")]
        Move = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Copy")]
        Copy = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Test")]
        Test = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Invalid")]
        Invalid = 6,

    }


}

#pragma warning restore  108
#pragma warning restore  114
#pragma warning restore  472
#pragma warning restore  612
#pragma warning restore 1573
#pragma warning restore 1591
#pragma warning restore 8073
#pragma warning restore 3016
#pragma warning restore 8603
#pragma warning restore 8604
#pragma warning restore 8618
#pragma warning restore 8625
