@inherits InputBase<ICollection<V1CommonLocalizations_Localization>>
@using System.Diagnostics
@using System.Diagnostics.CodeAnalysis
@using Altinn.ApiClients.Dialogporten.Features.V1
<div>
    <label>localizations:</label>
    <table>
        <thead>
        @if ((Value ?? throw new InvalidOperationException()).Any())
        {
            <tr>
                <th>Language Code</th>
                <th>Text</th>
                <th>Actions</th>
            </tr>
        }
        </thead>
        <tbody>
        @foreach (var localization in Value!)
        {
            <tr>
                <td>
                    <InputText @bind-Value="localization.LanguageCode" placeholder="Language Code"/>
                </td>
                <td>
                    <InputText @bind-Value="localization.Value" placeholder="Localized Value"/>
                </td>
                <td>
                    <button type="button" @onclick="() => Remove(localization)">Remove</button>
                </td>
            </tr>
        }
        </tbody>
    </table>

    <div>
        <button type="button" @onclick="Add">Add Localization</button>
    </div>
</div>

@code{

    // private ValidationMessageStore? _messageStore;

    // [CascadingParameter]
    // private EditContext? CascadedEditContext2 { get; set; }


    protected override void OnInitialized()
    {
        base.OnInitialized();

        // if (CascadedEditContext2 == null)
        // {
        //     throw new InvalidOperationException($"{nameof(InputLocalization)} requires a cascading " +
        //         $"parameter of type {nameof(EditContext)}. For example, you can use {nameof(InputLocalization)} " +
        //         $"inside an {nameof(EditForm)}.");
        // }


        // Initialize the message store
        // _messageStore = new ValidationMessageStore(CascadedEditContext2);

        // Subscribe to field changes to re-validate when the value changes
        // CascadedEditContext2.OnFieldChanged += HandleFieldChanged;
        // Optional: Subscribe to validation requests for form-level validation triggers
        // CascadedEditContext.OnValidationRequested += HandleValidationRequested;
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        Value ??= new List<V1CommonLocalizations_Localization>();
    }

    protected override bool TryParseValueFromString(string? value, [MaybeNullWhen(false)] out ICollection<V1CommonLocalizations_Localization> result, [NotNullWhen(false)] out string? validationErrorMessage)
    {
        result = CurrentValue ?? new List<V1CommonLocalizations_Localization>();
        validationErrorMessage = "";
        return true;
    }

    // private void HandleFieldChanged(object? sender, FieldChangedEventArgs e)
    // {
    //     // Check if the changed field is the one this component is bound to
    //     if (e.FieldIdentifier.Equals(FieldIdentifier))
    //     {
    //         // ValidateValue(CurrentValue);
    //     }
    //     ValueChanged.InvokeAsync(Value);
    //
    // }

    // private void ValidateValue(ICollection<V1CommonLocalizations_Localization>? value)
    // {
    //     if (CascadedEditContext2 == null || _messageStore == null) return; // Should not happen if OnInitialized worked
    //
    //     // 1. Clear previous custom messages for this field
    //     _messageStore.Clear(FieldIdentifier);
    //
    //     // 2. Apply custom validation rule
    //     if (value != null && !value.Any())
    //     {
    //         // 3. Add a custom error message if validation fails
    //         _messageStore.Add(FieldIdentifier, "You must have at least 1");
    //     }
    //
    //     // 4. Notify the EditContext that the validation state has changed
    //     // This triggers ValidationMessage/ValidationSummary components to update
    //     CascadedEditContext2.NotifyValidationStateChanged();
    // }

    // // Unsubscribe from events when the component is disposed
    // protected override void Dispose(bool disposing)
    // {
    //     if (disposing && CascadedEditContext2 != null)
    //     {
    //         CascadedEditContext2.OnFieldChanged -= HandleFieldChanged;
    //         // CascadedEditContext.OnValidationRequested -= HandleValidationRequested;
    //     }
    //     base.Dispose(disposing);
    // }


    private void Add()
    {
        if (Value is null) throw new UnreachableException("Localization is Null when removing, This should not be possible");
        Value.Add(new V1CommonLocalizations_Localization { LanguageCode = "", Value = "" });
        ValueChanged.InvokeAsync(Value);
    }

    private void Remove(V1CommonLocalizations_Localization localization)
    {
        if (Value is null) throw new UnreachableException("Localization is Null when Adding, This should not be possible");
        Value.Remove(localization);

        ValueChanged.InvokeAsync(Value);
    }
}