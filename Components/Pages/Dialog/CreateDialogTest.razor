@page "/CreateDialogTest"
@using Altinn.ApiClients.Dialogporten.Features.V1
@rendermode InteractiveServer
@inject IServiceownerApi ServiceOwnerApi
<h3>CreateDialogTest</h3>

<EditForm Model="CreateDialog" OnValidSubmit="@(() => Submit())"
          FormName="CreateDialogTest">
    <DataAnnotationsValidator/>
    <ValidationSummary/>

    <div>
        <label>Id</label>
        <InputGuid @bind-Value="@CreateDialog.Id"></InputGuid>
        <ValidationMessage For="@(() => CreateDialog.Id)"/>
    </div>

    <div>
        <label>Idempotent Key</label>
        <InputText @bind-Value="@CreateDialog.IdempotentKey"></InputText>
        <ValidationMessage For="@(() => CreateDialog.IdempotentKey)"/>
    </div>

    <div>
        <label>Service Resource</label>
        <InputText AdditionalAttributes="@_req"
                   @bind-Value="@CreateDialog.ServiceResource"></InputText>
        <ValidationMessage For="@(() => CreateDialog.ServiceResource)"/>
    </div>

    <div>
        <label>Party</label>
        <InputText AdditionalAttributes="@_req" @bind-Value="@CreateDialog.Party"></InputText>
        <ValidationMessage For="@(() => CreateDialog.Party)"/>
    </div>

    <div>
        <label>Progress</label>
        <InputNumber @bind-Value="@CreateDialog.Progress"></InputNumber>
        <ValidationMessage For="@(() => CreateDialog.Progress)"/>
    </div>

    <div>
        <label for="extendedStatus">Extended Status</label>
        <InputText id="extendedStatus" @bind-Value="@CreateDialog.ExtendedStatus"></InputText>
        <ValidationMessage For="@(() => CreateDialog.ExtendedStatus)"/>
    </div>

    <div>
        <label for="externalReference">External Reference</label>
        <InputText id="externalReference" @bind-Value="@CreateDialog.ExternalReference"></InputText>
        <ValidationMessage For="@(() => CreateDialog.ExternalReference)"/>
    </div>

    <div>
        <label for="visibleFrom">Visible From</label>
        <InputDate id="visibleFrom" @bind-Value="@CreateDialog.VisibleFrom"></InputDate>
        <ValidationMessage For="@(() => CreateDialog.VisibleFrom)"/>
    </div>

    <div>
        <label for="dueAt">Due At</label>
        <InputDate id="dueAt" @bind-Value="@CreateDialog.DueAt"></InputDate>
        <ValidationMessage For="@(() => CreateDialog.DueAt)"/>
    </div>

    <div>
        <label for="process">Process</label>
        <InputText id="process" @bind-Value="@CreateDialog.Process"></InputText>
        <ValidationMessage For="@(() => CreateDialog.Process)"/>
    </div>

    <div>
        <label for="precedingProcess">Preceding Process</label>
        <InputText id="precedingProcess" @bind-Value="@CreateDialog.PrecedingProcess"></InputText>
        <ValidationMessage For="@(() => CreateDialog.PrecedingProcess)"/>
    </div>

    <div>
        <label for="expiresAt">Expires At</label>
        <InputDate id="expiresAt" @bind-Value="@CreateDialog.ExpiresAt"></InputDate>
        <ValidationMessage For="@(() => CreateDialog.ExpiresAt)"/>
    </div>

    <div>
        <label for="createdAt">Created At</label>
        <InputDate id="createdAt" @bind-Value="@CreateDialog.CreatedAt"></InputDate>
        <ValidationMessage For="@(() => CreateDialog.CreatedAt)"/>
    </div>

    <div>
        <label for="updatedAt">Updated At</label>
        <InputDate id="updatedAt" @bind-Value="@CreateDialog.UpdatedAt"></InputDate>
        <ValidationMessage For="@(() => CreateDialog.UpdatedAt)"/>
    </div>

    <div>
        <label for="status">Status</label>
        <InputSelect id="status" @bind-Value="@CreateDialog.Status">
            @foreach (var status in Enum.GetValues<DialogsEntities_DialogStatus>())
            {
                <option value="@status">@status</option>
            }
        </InputSelect>
        <ValidationMessage For="@(() => CreateDialog.Status)"/>
    </div>

    <div>
        <label for="systemLabel">System Label:</label>
        <InputSelect id="systemLabel" @bind-Value="@CreateDialog.SystemLabel">
            @foreach (var label in Enum.GetValues<DialogEndUserContextsEntities_SystemLabel>())
            {
                <option value="@label">@label</option>
            }
        </InputSelect>
        <ValidationMessage For="@(() => CreateDialog.SystemLabel)"/>
    </div>

    <div>
        <label>Content</label>
        <EditContent AdditionalAttributes="@_req" @bind-Value="@CreateDialog.Content"/>
    </div>

    <fieldset>
        <legend>Search Tags</legend>
        <table>
            @foreach (var tag in CreateDialog.SearchTags)
            {
                <tr>
                    <td>
                        <InputText @bind-Value="tag.Value"></InputText>
                        <ValidationMessage For="@(() => tag.Value)"></ValidationMessage>
                    </td>
                    <td>
                        <button type="button" @onclick="() => CreateDialog.SearchTags.Remove(tag)">Remove</button>
                    </td>
                </tr>
            }
        </table>
        <button type="button"
                @onclick="() => CreateDialog.SearchTags.Add(new V1ServiceOwnerDialogsCommandsCreate_Tag())">
            Add SearchTag
        </button>
    </fieldset>

    <fieldset>
        <legend>Attachment</legend>
        <table>
            @foreach (var attachment in CreateDialog.Attachments)
            {
                <tr>
                    <td>
                        <InputGuid @bind-Value="@attachment.Id"/>
                        <ValidationMessage For="@(() => attachment.Id)"/>
                    </td>
                    <td>
                        <InputAttachmentUrl @bind-Value="@attachment.Urls"/>
                    </td>
                    <td>
                        <InputLocalization @bind-Value="attachment.DisplayName"/>
                    </td>
                    <td>
                        <button type="button" @onclick="() => RemoveAttachment(attachment)">Remove</button>
                    </td>
                </tr>
            }
        </table>
        <button type="button" @onclick="AddAttachment">Add Attachment</button>
    </fieldset>

    <div>
        <InputTransmission @bind-Value="@CreateDialog.Transmissions"/>
    </div>

    <fieldset>
        <!-- Gui actions -->
        <InputGuiActions @bind-Value="CreateDialog.GuiActions"/>
    </fieldset>

    <fieldset>
        <!-- Api actions -->
        <InputApiAction @bind-Value="CreateDialog.ApiActions"/>
    </fieldset>

    <fieldset>
        <!-- Activities -->
        <InputActivites @bind-Value="CreateDialog.Activities"/>
    </fieldset>
    <button type="submit">Submit</button>
</EditForm>

@code {
    V1ServiceOwnerDialogsCommandsCreate_Dialog CreateDialog { get; set; } = new();
    private readonly Dictionary<string, object?> _req = new()
    {
        { "required", true }
    };

    protected override void OnInitialized()
    {
        base.OnInitialized();
        CreateDialog.Attachments = [];
        CreateDialog.SearchTags = [];
        CreateDialog.Transmissions = [];
        CreateDialog.GuiActions = [];
        CreateDialog.ApiActions = [];
        CreateDialog.Activities = [];
    }
    private void AddAttachment()
    {
        CreateDialog.Attachments.Add(new V1ServiceOwnerDialogsCommandsCreate_Attachment
        {
            Id = null,
            DisplayName = [],
            Urls = []
        });
    }

    private void RemoveAttachment(V1ServiceOwnerDialogsCommandsCreate_Attachment attachment)
    {
        CreateDialog.Attachments.Remove(attachment);
    }

    private async Task Submit()
    {
        var response = await ServiceOwnerApi.V1ServiceOwnerDialogsCreateDialog(CreateDialog);
        Console.WriteLine(response.StatusCode);
    }

}