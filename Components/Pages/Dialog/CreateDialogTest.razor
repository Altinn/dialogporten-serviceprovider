@page "/CreateDialogTest"
@using Altinn.ApiClients.Dialogporten.Features.V1
@rendermode InteractiveServer
<h3>CreateDialogTest</h3>

<EditForm Model="CreateDialog" OnValidSubmit=@(() =>
{
    Console.WriteLine("hei" + CreateDialog.Id);
})
          FormName="CreateDialogTest">
    <DataAnnotationsValidator/>
    <ValidationSummary/>

    <div>
        <label>Id</label>
        <InputGuid @bind-Value="@CreateDialog.Id"></InputGuid>
        <ValidationMessage For="@(() => CreateDialog.Id)"/>
    </div>

    <div>
        <label>Idempotent Key</label>
        <InputText @bind-Value="@CreateDialog.IdempotentKey"></InputText>
        <ValidationMessage For="@(() => CreateDialog.IdempotentKey)"/>
    </div>

    <div>
        <label>Service Resource</label>
        <InputText @bind-Value="@CreateDialog.ServiceResource"></InputText>
        <ValidationMessage For="@(() => CreateDialog.ServiceResource)"/>
    </div>

    <div>
        <label>Party</label>
        <InputText @bind-Value="@CreateDialog.Party"></InputText>
        <ValidationMessage For="@(() => CreateDialog.Party)"/>
    </div>

    <div>
        <label>Progress</label>
        <InputNumber @bind-Value="@CreateDialog.Progress"></InputNumber>
        <ValidationMessage For="@(() => CreateDialog.Progress)"/>
    </div>

    <div>
        <label for="extendedStatus">Extended Status</label>
        <InputText id="extendedStatus" @bind-Value="@CreateDialog.ExtendedStatus"></InputText>
        <ValidationMessage For="@(() => CreateDialog.ExtendedStatus)"/>
    </div>

    <div>
        <label for="externalReference">External Reference</label>
        <InputText id="externalReference" @bind-Value="@CreateDialog.ExternalReference"></InputText>
        <ValidationMessage For="@(() => CreateDialog.ExternalReference)"/>
    </div>

    <div>
        <label for="visibleFrom">Visible From</label>
        <InputDate id="visibleFrom" @bind-Value="@CreateDialog.VisibleFrom"></InputDate>
        <ValidationMessage For="@(() => CreateDialog.VisibleFrom)"/>
    </div>

    <div>
        <label for="dueAt">Due At</label>
        <InputDate id="dueAt" @bind-Value="@CreateDialog.DueAt"></InputDate>
        <ValidationMessage For="@(() => CreateDialog.DueAt)"/>
    </div>

    <div>
        <label for="process">Process</label>
        <InputText id="process" @bind-Value="@CreateDialog.Process"></InputText>
        <ValidationMessage For="@(() => CreateDialog.Process)"/>
    </div>

    <div>
        <label for="precedingProcess">Preceding Process</label>
        <InputText id="precedingProcess" @bind-Value="@CreateDialog.PrecedingProcess"></InputText>
        <ValidationMessage For="@(() => CreateDialog.PrecedingProcess)"/>
    </div>

    <div>
        <label for="expiresAt">Expires At</label>
        <InputDate id="expiresAt" @bind-Value="@CreateDialog.ExpiresAt"></InputDate>
        <ValidationMessage For="@(() => CreateDialog.ExpiresAt)"/>
    </div>

    <div>
        <label for="createdAt">Created At</label>
        <InputDate id="createdAt" @bind-Value="@CreateDialog.CreatedAt"></InputDate>
        <ValidationMessage For="@(() => CreateDialog.CreatedAt)"/>
    </div>

    <div>
        <label for="updatedAt">Updated At</label>
        <InputDate id="updatedAt" @bind-Value="@CreateDialog.UpdatedAt"></InputDate>
        <ValidationMessage For="@(() => CreateDialog.UpdatedAt)"/>
    </div>

    <div>
        <label for="status">Status</label>
        <InputSelect id="status" @bind-Value="@CreateDialog.Status">
            @foreach (var status in Enum.GetValues<DialogsEntities_DialogStatus>())
            {
                <option value="@status">@status</option>
            }
        </InputSelect>
        <ValidationMessage For="@(() => CreateDialog.Status)"/>
    </div>

    <div>
        <label for="systemLabel">System Label:</label>
        <InputSelect id="systemLabel" @bind-Value="@CreateDialog.SystemLabel">
            @foreach (var label in Enum.GetValues<DialogEndUserContextsEntities_SystemLabel>())
            {
                <option value="@label">@label</option>
            }
        </InputSelect>
        <ValidationMessage For="@(() => CreateDialog.SystemLabel)"/>
    </div>

    <div>
        <label>Content</label>
        <EditContent @bind-Value="@CreateDialog.Content"/>
    </div>

    <fieldset>
        <legend>Search Tags</legend>
        <table>
            @foreach (var tag in CreateDialog.SearchTags)
            {
                <tr>
                    <td>
                        <InputText @bind-Value="tag.Value"></InputText>
                        <ValidationMessage For="@(() => tag.Value)"></ValidationMessage>
                    </td>
                    <td>
                        <button type="button" @onclick="() => CreateDialog.SearchTags.Remove(tag)">Remove</button>
                    </td>
                </tr>
            }
        </table>
        <button type="button"
                @onclick="() => CreateDialog.SearchTags.Add(new V1ServiceOwnerDialogsCommandsCreate_Tag())">
            Add SearchTag
        </button>
    </fieldset>

    <fieldset>
        <legend>Attachment</legend>
        <table>
            @foreach (var attachment in CreateDialog.Attachments)
            {
                <tr>
                    <td>
                        <InputGuid @bind-Value="@attachment.Id"/>
                        <ValidationMessage For="@(() => attachment.Id)"/>
                    </td>
                    <td>
                        <InputAttachmentUrl @bind-Value="@attachment.Urls"/>
                    </td>
                    <td>
                        <InputLocalization @bind-Value="attachment.DisplayName"/>
                    </td>
                    <td>
                        <button type="button" @onclick="() => RemoveAttachment(attachment)">Remove</button>
                    </td>
                </tr>
            }
        </table>
        <button type="button" @onclick="AddAttachment">Add Attachment</button>
    </fieldset>

    <fieldset>
        <legend>Transmission</legend>
        <table>
            @foreach (var transmission in CreateDialog.Transmissions)
            {
                <tr>
                    <td>
                        <InputGuid @bind-Value="transmission.Id"/>
                        <ValidationMessage For="() => transmission.Id"/>
                    </td>

                    <td>
                        <InputDate @bind-Value="@transmission.CreatedAt"/>
                        <ValidationMessage For="() => transmission.CreatedAt"/>
                    </td>

                    <td>
                        <InputText @bind-Value="@transmission.AuthorizationAttribute"/>
                        <ValidationMessage For="() => transmission.AuthorizationAttribute"/>
                    </td>

                    <td>
                        <InputUri @bind-Value="@transmission.ExtendedType"></InputUri>
                        <ValidationMessage For="() => transmission.ExtendedType"/>
                    </td>
                    <td>
                        <InputGuid @bind-Value="@transmission.RelatedTransmissionId"/>
                        <ValidationMessage For="() => transmission.RelatedTransmissionId"/>
                    </td>
                    <td>
                        <InputSelect @bind-Value="@transmission.Type">
                            @foreach (var type in Enum.GetValues<DialogsEntitiesTransmissions_DialogTransmissionType>())
                            {
                                <option value="@type">@type</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="@(() => transmission.Type)"/>
                    </td>

                    <td>
                        <InputCommonActor @bind-Value="@transmission.Sender"></InputCommonActor>
                        <ValidationMessage For="() => transmission.Sender"/>
                    </td>

                    <td>
                        <fieldset>
                            <label>Content Title</label>
                            <InputCommonContentValue @bind-Value="@transmission.Content.Title"/>
                            <ValidationMessage For="() => transmission.Content.Title"/>

                            <label>Content Summary</label>
                            <InputCommonContentValue @bind-Value="@transmission.Content.Summary"/>
                            <ValidationMessage For="() => transmission.Content.Summary"/>

                            <label>Content Reference</label>
                            <InputCommonContentValue @bind-Value="@transmission.Content.ContentReference"/>
                            <ValidationMessage For="() => transmission.Content.ContentReference"/>
                        </fieldset>

                    </td>

                    <td>
                        @foreach (var attachment in transmission.Attachments)
                        {
                            // Amund: Labels eller Td
                            <InputGuid @bind-Value="@attachment.Id"/>
                            <InputLocalization @bind-Value="@attachment.DisplayName"/>
                            <InputTransmissionAttachmentUrl @bind-Value="@attachment.Urls"/>
                            <button type="button"
                                    @onclick="() => RemoveTransmissionAttachment(transmission, attachment)">Remove
                            </button>
                        }
                    </td>

                    <td>
                        <button type="button" @onclick="() => RemoveTransmission(transmission)">Remove</button>
                    </td>
                </tr>

                <button type="button" @onclick="() => AddTransmissionAttachment(transmission)">Add Transmission
                    Attachment
                </button>
            }
        </table>
        <button type="button" @onclick="AddTransmission">Add Transmission</button>

        <fieldset>
            <!-- Gui actions -->
        </fieldset>

        <fieldset>
            <!-- Api actions -->
        </fieldset>

        <fieldset>
            <!-- Activities -->
        </fieldset>
    </fieldset>

    <button type="submit">Submit</button>
</EditForm>

@code {
    V1ServiceOwnerDialogsCommandsCreate_Dialog CreateDialog { get; set; } = new();
    protected override void OnInitialized()
    {
        base.OnInitialized();
        CreateDialog.Content = new V1ServiceOwnerDialogsCommandsCreate_Content
        {
            Title = new V1CommonContent_ContentValue
            {
                Value = []
            },
            NonSensitiveTitle = new V1CommonContent_ContentValue
            {
                Value = []
            },
            Summary = new V1CommonContent_ContentValue
            {
                Value = []
            },
            NonSensitiveSummary = new V1CommonContent_ContentValue
            {
                Value = []
            },
            SenderName = new V1CommonContent_ContentValue
            {
                Value = []
            },
            AdditionalInfo = new V1CommonContent_ContentValue
            {
                Value = []
            },
            ExtendedStatus = new V1CommonContent_ContentValue
            {
                Value = []
            },
            MainContentReference = new V1CommonContent_ContentValue
            {
                Value = []
            }
        };
        CreateDialog.Attachments = [];
        CreateDialog.SearchTags = [];
        CreateDialog.Transmissions = [];
    }
    private void AddAttachment()
    {
        CreateDialog.Attachments.Add(new V1ServiceOwnerDialogsCommandsCreate_Attachment
        {
            Id = null,
            DisplayName = [],
            Urls = []
        });
    }

    private void RemoveAttachment(V1ServiceOwnerDialogsCommandsCreate_Attachment attachment)
    {
        CreateDialog.Attachments.Remove(attachment);
    }

    private void AddTransmission()
    {
        CreateDialog.Transmissions.Add(new V1ServiceOwnerDialogsCommandsCreate_Transmission
        {
            Id = null,
            CreatedAt = default,
            AuthorizationAttribute = null!,
            ExtendedType = null!,
            RelatedTransmissionId = null,
            Type = DialogsEntitiesTransmissions_DialogTransmissionType.Information,
            Sender = new V1ServiceOwnerCommonActors_Actor(),
            Content = new V1ServiceOwnerDialogsCommandsCreate_TransmissionContent
            {
                Title = new V1CommonContent_ContentValue(),
                Summary = new V1CommonContent_ContentValue(),
                ContentReference = new V1CommonContent_ContentValue()
            },
            Attachments = []
        });

    }

    private void RemoveTransmission(V1ServiceOwnerDialogsCommandsCreate_Transmission transmission)
    {
        CreateDialog.Transmissions.Remove(transmission);
    }


    private static void RemoveTransmissionAttachment(V1ServiceOwnerDialogsCommandsCreate_Transmission transmission, V1ServiceOwnerDialogsCommandsCreate_TransmissionAttachment attachment)
    {
        transmission.Attachments.Remove(attachment);
    }

    private void AddTransmissionAttachment(V1ServiceOwnerDialogsCommandsCreate_Transmission transmission)
    {
        transmission.Attachments.Add(new V1ServiceOwnerDialogsCommandsCreate_TransmissionAttachment());
    }
}