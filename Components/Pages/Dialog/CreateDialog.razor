@page "/dialog/create"
@using Altinn.ApiClients.Dialogporten.Features.V1
@using Digdir.BDB.Dialogporten.ServiceProvider.Components.Input
@using Digdir.BDB.Dialogporten.ServiceProvider.Components.Input.common
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using Org.BouncyCastle.Security
@inject ProtectedLocalStorage ProtectedLocalStore
@inject IServiceownerApi ServiceOwnerApi
@rendermode InteractiveServer
<h3>CreateDialogTest</h3>

<EditForm Model="CreateDialogCommand" OnValidSubmit="@(() => Submit())" FormName="CreateDialogTest" @ref="_form">
    <DataAnnotationsValidator/>
    <ValidationSummary/>

    <button type="button" onclick="@Prefill">prefill</button>
    <div>
        <label>Id</label>
        <InputGuid @bind-Value="@CreateDialogCommand.Id"></InputGuid>
        <ValidationMessage For="@(() => CreateDialogCommand.Id)"/>
    </div>

    <div>
        <label>Idempotent Key</label>
        <InputText @bind-Value="@CreateDialogCommand.IdempotentKey"></InputText>
        <ValidationMessage For="@(() => CreateDialogCommand.IdempotentKey)"/>
    </div>

    <div>
        <label>Service Resource</label>
        <InputSelect @bind-Value="@CreateDialogCommand.ServiceResource">
            <option value="" disabled selected>Select your option</option>
            @foreach (var status in RegClient.Resources)
            {
                <option value=@("urn:altinn:resource:" + status.Identifier)>@status.Identifier</option>
            }
        </InputSelect>
        <ValidationMessage For="@(() => CreateDialogCommand.ServiceResource)"/>
    </div>

    <div>
        <label>Party</label>
        @* <InputText AdditionalAttributes="@_req" @bind-Value="@CreateDialogCommand.Party"></InputText> *@
        <InputParty @bind-Value="CreateDialogCommand.Party"></InputParty>
        <ValidationMessage For="@(() => CreateDialogCommand.Party)"/>
    </div>

    <div>
        <label>Progress</label>
        <InputNumber @bind-Value="@CreateDialogCommand.Progress"></InputNumber>
        <ValidationMessage For="@(() => CreateDialogCommand.Progress)"/>
    </div>

    <div>
        <label for="extendedStatus">Extended Status</label>
        <InputText id="extendedStatus" @bind-Value="@CreateDialogCommand.ExtendedStatus"></InputText>
        <ValidationMessage For="@(() => CreateDialogCommand.ExtendedStatus)"/>
    </div>

    <div>
        <label for="externalReference">External Reference</label>
        <InputText id="externalReference" @bind-Value="@CreateDialogCommand.ExternalReference"></InputText>
        <ValidationMessage For="@(() => CreateDialogCommand.ExternalReference)"/>
    </div>

    <div>
        <label for="visibleFrom">Visible From</label>
        <DateInputWrapper id="visibleFrom" @bind-Value="@CreateDialogCommand.VisibleFrom"/>
        <ValidationMessage For="@(() => CreateDialogCommand.VisibleFrom)"/>
    </div>

    <div>
        <label for="dueAt">Due At</label>
        <DateInputWrapper id="dueAt" @bind-Value="@CreateDialogCommand.DueAt"/>
        <ValidationMessage For="@(() => CreateDialogCommand.DueAt)"/>
    </div>

    <div>
        <label for="process">Process</label>
        <InputText id="process" @bind-Value="@CreateDialogCommand.Process"></InputText>
        <ValidationMessage For="@(() => CreateDialogCommand.Process)"/>
    </div>

    <div>
        <label for="precedingProcess">Preceding Process</label>
        <InputText id="precedingProcess" @bind-Value="@CreateDialogCommand.PrecedingProcess"></InputText>
        <ValidationMessage For="@(() => CreateDialogCommand.PrecedingProcess)"/>
    </div>

    <div>
        <label>Api Only</label>
        <InputCheckbox @bind-Value="CreateDialogCommand.IsApiOnly"/>
    </div>

    <div>
        <label for="expiresAt">Expires At</label>
        <DateInputWrapper id="expiresAt" @bind-Value="@CreateDialogCommand.ExpiresAt"></DateInputWrapper>
        <ValidationMessage For="@(() => CreateDialogCommand.ExpiresAt)"/>
    </div>

    <div>
        <label for="createdAt">Created At</label>
        <DateInputWrapper id="createdAt" @bind-Value="@CreateDialogCommand.CreatedAt"></DateInputWrapper>
        <ValidationMessage For="@(() => CreateDialogCommand.CreatedAt)"/>
    </div>

    <div>
        <label for="updatedAt">Updated At</label>
        <DateInputWrapper id="updatedAt" @bind-Value="@CreateDialogCommand.UpdatedAt"></DateInputWrapper>
        <ValidationMessage For="@(() => CreateDialogCommand.UpdatedAt)"/>
    </div>

    <div>
        <label for="status">Status</label>
        <InputSelect id="status" @bind-Value="@CreateDialogCommand.Status">
            @foreach (var status in Enum.GetValues<DialogsEntities_DialogStatus>())
            {
                <option value="@status">@status</option>
            }
        </InputSelect>
        <ValidationMessage For="@(() => CreateDialogCommand.Status)"/>
    </div>

    <div>
        <label for="systemLabel">System Label:</label>
        <InputSelect id="systemLabel" @bind-Value="@CreateDialogCommand.SystemLabel">
            @foreach (var label in Enum.GetValues<DialogEndUserContextsEntities_SystemLabel>())
            {
                <option value="@label">@label</option>
            }
        </InputSelect>
        <ValidationMessage For="@(() => CreateDialogCommand.SystemLabel)"/>
    </div>

    <div>
        <label>Content</label>
        <InputContent AdditionalAttributes="@_req" @bind-Value="@CreateDialogCommand.Content"/>
    </div>

    <fieldset>
        <legend>Search Tags</legend>
        <table>
            @foreach (var tag in CreateDialogCommand.SearchTags)
            {
                <tr>
                    <td>
                        <InputText @bind-Value="tag.Value"></InputText>
                        <ValidationMessage For="@(() => tag.Value)"></ValidationMessage>
                    </td>
                    <td>
                        <button type="button" @onclick="() => CreateDialogCommand.SearchTags.Remove(tag)">Remove
                        </button>
                    </td>
                </tr>
            }
        </table>
        <button type="button"
                @onclick="() => CreateDialogCommand.SearchTags.Add(new V1ServiceOwnerDialogsCommandsCreate_Tag())">
            Add SearchTag
        </button>
    </fieldset>

    <fieldset>
        <legend>Attachment</legend>
        <table>
            @foreach (var attachment in CreateDialogCommand.Attachments)
            {
                <tr>
                    <td>
                        <InputGuid @bind-Value="@attachment.Id"/>
                        <ValidationMessage For="@(() => attachment.Id)"/>
                    </td>
                    <td>
                        <InputAttachmentUrl @bind-Value="@attachment.Urls"/>
                    </td>
                    <td>
                        <InputLocalization @bind-Value="attachment.DisplayName"/>
                    </td>
                    <td>
                        <button type="button" @onclick="() => RemoveAttachment(attachment)">Remove</button>
                    </td>
                </tr>
            }
        </table>
        <button type="button" @onclick="AddAttachment">Add Attachment</button>
    </fieldset>

    <div>
        <InputTransmission @bind-Value="@CreateDialogCommand.Transmissions"/>
    </div>

    <fieldset>
        <!-- Gui actions -->
        <InputGuiActions @bind-Value="CreateDialogCommand.GuiActions"/>
    </fieldset>

    <fieldset>
        <!-- Api actions -->
        <InputApiAction @bind-Value="CreateDialogCommand.ApiActions"/>
    </fieldset>

    <fieldset>
        <!-- Activities -->
        <InputActivites @bind-Value="CreateDialogCommand.Activities"/>
    </fieldset>
    <button type="submit">Submit</button>
</EditForm>
<label For="dialog-seed">Seed:</label>
<InputTextArea id="dialog-seed" @bind-Value="Seed"/>
<button type="button" @onclick="ParseSeed">Import</button>
@if (_showPopUp)
{

    <PopUpMessage Header="@_header" Message="@_message" OnClick="() => _showPopUp = false"></PopUpMessage>
}

@code {
    private EditForm _form = null!;
    private string Seed { get; set; } = "";

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            _messageStore = new ValidationMessageStore(_form.EditContext ?? throw new NullReferenceException());
            _form.EditContext.OnValidationRequested += ValidateForm;
        }
    }

    private void ValidateForm(object? sender, ValidationRequestedEventArgs e)
    {
        var context = (EditContext)sender!;

        _messageStore.Clear();

        ValidateContentValue(CreateDialogCommand.Content.Title, nameof(CreateDialogCommand.Content.Title));
        ValidateContentValue(CreateDialogCommand.Content.NonSensitiveTitle, nameof(CreateDialogCommand.Content.NonSensitiveTitle));

        ValidateContentValue(CreateDialogCommand.Content.Summary, nameof(CreateDialogCommand.Content.Summary));
        ValidateContentValue(CreateDialogCommand.Content.NonSensitiveSummary, nameof(CreateDialogCommand.Content.NonSensitiveSummary));

        ValidateContentValue(CreateDialogCommand.Content.SenderName, nameof(CreateDialogCommand.Content.SenderName));

        ValidateContentValue(CreateDialogCommand.Content.AdditionalInfo, nameof(CreateDialogCommand.Content.AdditionalInfo));

        ValidateContentValue(CreateDialogCommand.Content.ExtendedStatus, nameof(CreateDialogCommand.Content.ExtendedStatus));

        ValidateContentValue(CreateDialogCommand.Content.MainContentReference, nameof(CreateDialogCommand.Content.MainContentReference));

        context.NotifyValidationStateChanged();

    }

    private void ValidateContentValue(V1CommonContent_ContentValue? content, string name)
    {
        Console.WriteLine($"name: {name}");
        if (content is null) return;

        if ((content.Value == null || !content.Value.Any()) && !string.IsNullOrEmpty(content.MediaType))
        {
            var fieldId = new FieldIdentifier(CreateDialogCommand, $"Content.{name}.Value");
            _messageStore.Add(fieldId, $"{name} requires at least one localization");
            Console.WriteLine($"Validation error added for {name}");
            return;
        }

        if (content.Value != null && content.Value.Any() && string.IsNullOrEmpty(content.MediaType))
        {
            var fieldId = new FieldIdentifier(CreateDialogCommand, $"Content.{name}.Value");
            _messageStore.Add(fieldId, $"{name} requires mediaType if you have any localization");
            Console.WriteLine($"Validation error added for {name}");
        }

    }

    V1ServiceOwnerDialogsCommandsCreate_Dialog CreateDialogCommand { get; set; } = new();
    private readonly Dictionary<string, object?> _req = new()
    {
        { "required", true }
    };

    bool _showPopUp;
    private string? _header;
    private string? _message;
    private ValidationMessageStore _messageStore = null!;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        var deleteButton = new V1ServiceOwnerDialogsCommandsCreate_GuiAction();
        deleteButton.Prefill(GuiActionPrefill.DeleteButton);

        CreateDialogCommand.Attachments = [];
        CreateDialogCommand.SearchTags =
        [
            new V1ServiceOwnerDialogsCommandsCreate_Tag
            {
                Value = "SOv0.1"
            }
        ];
        CreateDialogCommand.Transmissions = [];
        CreateDialogCommand.GuiActions = [deleteButton];
        CreateDialogCommand.ApiActions = [];
        CreateDialogCommand.Activities = [];
    }
    private void AddAttachment()
    {
        CreateDialogCommand.Attachments.Add(new V1ServiceOwnerDialogsCommandsCreate_Attachment
        {
            Id = null,
            DisplayName = [],
            Urls = []
        });
    }

    private void RemoveAttachment(V1ServiceOwnerDialogsCommandsCreate_Attachment attachment)
    {
        CreateDialogCommand.Attachments.Remove(attachment);
    }

    private async Task Submit()
    {
        var response = await ServiceOwnerApi.V1ServiceOwnerDialogsCreateDialog(CreateDialogCommand);
        _header = response.StatusCode.ToString();
        _message = response.IsSuccessStatusCode ? response.Content : response.Error.Content;
        _showPopUp = true;
        if (response.IsSuccessStatusCode)
        {

            var guidString = response.Content!;
            guidString = guidString.Trim('"');

            Guid.TryParse(guidString, out var guid);
            if (CreateDialogCommand.Transmissions.Any())
            {
                var getDialog = await ServiceOwnerApi.V1ServiceOwnerDialogsGetDialog(guid, null!);
                if (getDialog.IsSuccessStatusCode)
                {
                    // Get all transmission Id
                    var transmissionIds = getDialog.Content!.Transmissions.Select(x => x.Id).ToList();
                    var transmissionsStorageResult = await ProtectedLocalStore.GetAsync<Dictionary<Guid, List<Guid>>>("transmissions");

                    var transmissions = new List<Guid>();
                    var transmissionDict = new Dictionary<Guid, List<Guid>>();

                    if (transmissionsStorageResult is { Success: true, Value: not null })
                    {
                        transmissionDict = transmissionsStorageResult.Value;
                        if (transmissionDict.TryGetValue(guid, out var value))
                        {
                            transmissions = value;
                        }
                    }

                    transmissions.AddRange(transmissionIds);
                    transmissionDict[guid] = transmissions;
                    _ = ProtectedLocalStore.SetAsync("transmissions", transmissionDict);
                }

            }

            var dialogStorageResult = await ProtectedLocalStore.GetAsync<List<Guid>>("dialogs");
            List<Guid> dialogs = [];

            if (dialogStorageResult is { Success: true, Value: not null })
            {
                dialogs = dialogStorageResult.Value;
            }

            dialogs.Add(guid);

            _ = ProtectedLocalStore.SetAsync("dialogs", dialogs);
        }
    }

    private void Prefill()
    {
        CreateDialogCommand.Prefill(DialogPrefill.Skattemeldig);
        StateHasChanged();
    }

    private void ParseSeed()
    {
        // Amund: Cleaning av CreateDialogCommand
        var parts = Seed.Split(";");

        foreach (var part in parts)
        {
            var seedData = part.Split("=", 2);
            var fieldData = seedData.First().Split(":");
            string? param1 = null;
            if (fieldData.Length >= 2)
            {
                param1 = fieldData[1];
            }

            var value = seedData[1];
            switch (fieldData.First().ToLowerInvariant())
            {
                case "title":
                    CreateDialogCommand.Content.Title.Add(value, param1);
                    break;
                case "summary":
                    CreateDialogCommand.Content.Summary.Add(value, param1);
                    break;
                case "non-sensitive-title":
                    CreateDialogCommand.Content.NonSensitiveTitle.Add(value, param1);
                    break;
                case "non-sensitive-summary":
                    CreateDialogCommand.Content.NonSensitiveSummary.Add(value, param1);
                    break;
                case "sender":
                case "sendername":
                    CreateDialogCommand.Content.SenderName.Add(value, param1);
                    break;
                case "additional-info":
                    CreateDialogCommand.Content.AdditionalInfo.Add(value, param1);
                    break;
                case "main-content-reference":
                    CreateDialogCommand.Content.MainContentReference.Add(value, param1);
                    break;
                case "resource":
                    CreateDialogCommand.ServiceResource = "urn:altinn:resource:" + value;
                    break;
                case "searchtag":
                    CreateDialogCommand.SearchTags.Add(
                        new V1ServiceOwnerDialogsCommandsCreate_Tag
                        {
                            Value = value
                        });
                    break;
                case "attachment":
                    ParseAttachment(fieldData, value);
                    break;
                case "guiaction":
                    ParseGuiAction(fieldData, value);
                    break;
                case "transmission":
                    ParseTransmission(fieldData, value);
                    break;
                case "apiaction":
                    ParseApiAction(fieldData, value);
                    break;
                case "activity":
                    ParseActivity(fieldData, value);
                    break;
                default:
                    Console.WriteLine($"Field: {seedData.First()}, is not supported (yet)");
                    break;
            }
        }
        StateHasChanged();
    }
    private void ParseGuiAction(string[] data, string value)
    {
        if (!int.TryParse(data[1], out var index))
        {
            // Amund: WOO husk WOO
            throw new InvalidParameterException();
        }

        var guiActions = CreateDialogCommand.GuiActions.ToList();
        while (guiActions.Count < index)
        {
            guiActions.Add(new V1ServiceOwnerDialogsCommandsCreate_GuiAction
            {
                Title = [],
                Prompt = []
            });
        }
        var guiAction = guiActions[index - 1];
        var field = data[2];
        switch (field)
        {
            case "id":
                Guid.TryParse(value, out var guid);
                guiAction.Id = guid;
                break;
            case "action":
                guiAction.Action = value;
                break;
            case "authorizationattribute":
                guiAction.AuthorizationAttribute = value;
                break;
            case "url":
                if (Uri.TryCreate(value, UriKind.RelativeOrAbsolute, out var uri))
                {
                    guiAction.Url = uri;
                }
                break;
            case "isdeletedialogaction":
                if (bool.TryParse(value, out var result))
                {
                    guiAction.IsDeleteDialogAction = result;
                }
                break;

            case "httpmethod":
                if (Enum.TryParse<Http_HttpVerb>(value, out var httpMethod))
                {
                    guiAction.HttpMethod = httpMethod;
                }
                break;
            case "priority":
                if (Enum.TryParse<DialogsEntitiesActions_DialogGuiActionPriority>(value, out var priority))
                {
                    guiAction.Priority = priority;
                }
                break;
            case "title":
                var titleLang = data.Length > 3 ? data[3] : "nb";
                var title = new V1CommonLocalizations_Localization
                {
                    Value = value,
                    LanguageCode = titleLang
                };
                guiAction.Title.Add(title);
                break;
            case "prompt":
                var promptLang = data.Length > 3 ? data[3] : "nb";
                var prompt = new V1CommonLocalizations_Localization
                {
                    Value = value,
                    LanguageCode = promptLang
                };
                guiAction.Prompt.Add(prompt);
                break;

        }
        CreateDialogCommand.GuiActions = guiActions;
    }
    private void ParseAttachment(string[] data, string value)
    {
        if (!int.TryParse(data[1], out var attachmentIndex))
        {
            Console.WriteLine($"data[1]: {data[1]} could not be parsed to int");
            return;
        }

        var attachments = CreateDialogCommand.Attachments.ToList();
        while (attachments.Count < attachmentIndex)
        {
            attachments.Add(new V1ServiceOwnerDialogsCommandsCreate_Attachment
            {
                Urls = [],
                DisplayName = []
            });
        }
        var attachment = attachments[attachmentIndex - 1];
        var attachmentUrl = attachment.Urls?.FirstOrDefault() ?? new V1ServiceOwnerDialogsCommandsCreate_AttachmentUrl();

        var field = data[2];
        switch (field)
        {
            case "id":
                Guid.TryParse(value, out var guid);
                attachment.Id = guid;
                break;
            case "url":
                if (Uri.TryCreate(value, UriKind.RelativeOrAbsolute, out var uri))
                {
                    attachmentUrl.Url = uri;
                }
                break;
            case "mediatype":
                attachmentUrl.MediaType = value;
                break;
            case "type":
                attachmentUrl.ConsumerType = Enum.Parse<Attachments_AttachmentUrlConsumerType>(value);
                break;
            case "displayname":
            case "name":
                var nameLang = data.Length > 3 ? data[3] : "nb";
                var name = new V1CommonLocalizations_Localization
                {
                    Value = value,
                    LanguageCode = nameLang
                };
                attachment.DisplayName.Add(name);
                break;
            default:
                break;
        }

        attachment.Urls = [attachmentUrl];
        CreateDialogCommand.Attachments = attachments;

    }
    private void ParseTransmission(string[] data, string value)
    {
        if (!int.TryParse(data[1], out var transmissionIndex))
        {
            Console.WriteLine($"data[1]: {data[1]} could not be parsed to int");
            return;
        }

        var transmissions = CreateDialogCommand.Transmissions.ToList();
        while (transmissions.Count < transmissionIndex)
        {
            transmissions.Add(new V1ServiceOwnerDialogsCommandsCreate_Transmission
            {
                Type = DialogsEntitiesTransmissions_DialogTransmissionType.Information,
                Sender = new V1ServiceOwnerCommonActors_Actor
                {
                    ActorType = Actors_ActorType.ServiceOwner
                },
                Content = new V1ServiceOwnerDialogsCommandsCreate_TransmissionContent
                {
                    Title = new V1CommonContent_ContentValue { Value = [] },
                    Summary = new V1CommonContent_ContentValue { Value = [] },
                    ContentReference = new V1CommonContent_ContentValue { Value = [] }
                },
                Attachments = []
            });
        }
        var transmission = transmissions[transmissionIndex - 1];
        var field = data[2];

        switch (field)
        {
            case "id":
                Guid.TryParse(value, out var guid);
                transmission.Id = guid;
                break;
            case "createdat":
                if (DateTime.TryParse(value, out var dateTime))
                {
                    transmission.CreatedAt = dateTime;
                }
                break;
            case "authorizationattribute":
                transmission.AuthorizationAttribute = value;
                break;
            case "extendedtype":
                if (Uri.TryCreate(value, UriKind.RelativeOrAbsolute, out var uri))
                {
                    transmission.ExtendedType = uri;
                }
                break;
            case "relatedtransmissionid":
                if (Guid.TryParse(value, out var relatedId))
                {
                    transmission.RelatedTransmissionId = relatedId;
                }
                break;
            case "type":
                if (Enum.TryParse<DialogsEntitiesTransmissions_DialogTransmissionType>(value, out var type))
                {
                    transmission.Type = type;
                }
                break;
            case "sendertype":
                if (Enum.TryParse<Actors_ActorType>(value, out var actorType))
                {
                    transmission.Sender.ActorType = actorType;
                }
                break;
            case "senderid":
                transmission.Sender.ActorId = value;
                break;
            case "sendername":
                transmission.Sender.ActorName = value;
                break;
            case "title":
                var titleLang = data.Length > 3 ? data[3] : "nb";

                if (titleLang == "mediatype")
                {
                    transmission.Content.Title.MediaType = value;
                    break;
                }
                transmission.Content.Title.Value.Add(new V1CommonLocalizations_Localization
                {
                    Value = value,
                    LanguageCode = titleLang
                });
                break;
            case "summary":
                var summaryLang = data.Length > 3 ? data[3] : "nb";

                if (summaryLang == "mediatype")
                {
                    transmission.Content.Summary.MediaType = value;
                    break;
                }
                transmission.Content.Summary.Value.Add(new V1CommonLocalizations_Localization
                {
                    Value = value,
                    LanguageCode = summaryLang
                });
                break;
            case "contentreference":
                var contentLang = data.Length > 3 ? data[3] : "nb";
                if (contentLang == "mediatype")
                {
                    transmission.Content.ContentReference.MediaType = value;
                    break;
                }

                transmission.Content.ContentReference.Value.Add(new V1CommonLocalizations_Localization
                {
                    Value = value,
                    LanguageCode = contentLang
                });
                break;
            default:
                Console.WriteLine($"Field: {field}");
                break;
        }
        CreateDialogCommand.Transmissions = transmissions;
    }

    private void ParseApiAction(string[] data, string value)
    {
        if (!int.TryParse(data[1], out var apiActionIndex))
        {
            Console.WriteLine($"data[1]: {data[1]} could not be parsed to int");
            return;
        }

        var apiActions = CreateDialogCommand.ApiActions.ToList();
        while (apiActions.Count < apiActionIndex)
        {
            apiActions.Add(new V1ServiceOwnerDialogsCommandsCreate_ApiAction
            {
                Action = string.Empty,
                AuthorizationAttribute = string.Empty,
                Name = string.Empty,
                Endpoints = []
            });
        }
        var apiAction = apiActions[apiActionIndex - 1];
        var field = data[2];

        switch (field)
        {
            case "id":
                Guid.TryParse(value, out var guid);
                apiAction.Id = guid;
                break;
            case "action":
                apiAction.Action = value;
                break;
            case "authorizationattribute":
                apiAction.AuthorizationAttribute = value;
                break;
            case "name":
                apiAction.Name = value;
                break;
            case "endpoint":
                ParseApiActionEndpoint(data, value, apiAction);
                break;
            default:
                Console.WriteLine($"Field: {field} is not supported for API action (yet)");
                break;
        }

        CreateDialogCommand.ApiActions = apiActions;
    }


    private void ParseApiActionEndpoint(string[] data, string value, V1ServiceOwnerDialogsCommandsCreate_ApiAction apiAction)
    {
        if (data.Length < 4)
        {
            Console.WriteLine("Not enough parameters for API action endpoint");
            return;
        }

        if (!int.TryParse(data[3], out var endpointIndex))
        {
            Console.WriteLine($"data[3]: {data[3]} could not be parsed to int");
            return;
        }

        var endpoints = apiAction.Endpoints.ToList();
        while (endpoints.Count < endpointIndex)
        {
            endpoints.Add(new V1ServiceOwnerDialogsCommandsCreate_ApiActionEndpoint());
        }
        var endpoint = endpoints[endpointIndex - 1];

        if (data.Length < 5)
        {
            Console.WriteLine("Missing endpoint field parameter");
            return;
        }

        var endpointField = data[4];

        switch (endpointField)
        {
            case "url":
                if (Uri.TryCreate(value, UriKind.RelativeOrAbsolute, out var uri))
                {
                    endpoint.Url = uri;
                }
                break;
            case "httpmethod":
                if (Enum.TryParse<Http_HttpVerb>(value, out var httpMethod))
                {
                    endpoint.HttpMethod = httpMethod;
                }
                break;
            case "version":
                endpoint.Version = value;
                break;
            case "documentationurl":
                if (Uri.TryCreate(value, UriKind.RelativeOrAbsolute, out var docUri))
                {
                    endpoint.DocumentationUrl = docUri;
                }
                break;
            case "requestschema":
                if (Uri.TryCreate(value, UriKind.RelativeOrAbsolute, out var reqUri))
                {
                    endpoint.RequestSchema = reqUri;
                }
                break;
            case "responseschema":
                if (Uri.TryCreate(value, UriKind.RelativeOrAbsolute, out var respUri))
                {
                    endpoint.ResponseSchema = respUri;
                }
                break;
            case "deprecated":
                if (bool.TryParse(value, out var deprecated))
                {
                    endpoint.Deprecated = deprecated;
                }
                break;
            case "sunsetat":
                if (DateTimeOffset.TryParse(value, out var sunsetAt))
                {
                    endpoint.SunsetAt = sunsetAt;
                }
                break;
            default:
                Console.WriteLine($"Endpoint field: {endpointField} is not supported (yet)");
                break;
        }

        apiAction.Endpoints = endpoints;
    }

    private void ParseActivity(string[] data, string value)
    {
        if (!int.TryParse(data[1], out var activityIndex))
        {
            Console.WriteLine($"data[1]: {data[1]} could not be parsed to int");
            return;
        }

        var activities = CreateDialogCommand.Activities.ToList();
        while (activities.Count < activityIndex)
        {
            activities.Add(new V1ServiceOwnerDialogsCommandsCreate_Activity
            {
                PerformedBy = new V1ServiceOwnerCommonActors_Actor(),
                Description = []
            });
        }
        var activity = activities[activityIndex - 1];
        var field = data[2];

        switch (field)
        {
            case "id":
                Guid.TryParse(value, out var guid);
                activity.Id = guid;
                break;
            case "createdat":
                if (DateTimeOffset.TryParse(value, out var createdAt))
                {
                    activity.CreatedAt = createdAt;
                }
                break;
            case "extendedtype":
                if (Uri.TryCreate(value, UriKind.RelativeOrAbsolute, out var extendedType))
                {
                    activity.ExtendedType = extendedType;
                }
                break;
            case "type":
                if (Enum.TryParse<DialogsEntitiesActivities_DialogActivityType>(value, out var type))
                {
                    activity.Type = type;
                }
                break;
            case "transmissionid":
                if (Guid.TryParse(value, out var transmissionId))
                {
                    activity.TransmissionId = transmissionId;
                }
                break;
            case "performedby":
                ParseActivityPerformedBy(data, value, activity);
                break;
            case "description":
                var descriptionLang = data.Length > 3 ? data[3] : "nb";
                var description = new V1CommonLocalizations_Localization
                {
                    Value = value,
                    LanguageCode = descriptionLang
                };
                activity.Description = activity.Description.Append(description).ToList();
                break;
            default:
                Console.WriteLine($"Field: {field} is not supported for Activity (yet)");
                break;
        }

        CreateDialogCommand.Activities = activities;
    }

    private void ParseActivityPerformedBy(string[] data, string value, V1ServiceOwnerDialogsCommandsCreate_Activity activity)
    {
        if (data.Length < 4)
        {
            Console.WriteLine("Not enough parameters for Activity PerformedBy");
            return;
        }

        var performedByField = data[3];

        switch (performedByField)
        {
            case "actortype":
                if (Enum.TryParse<Actors_ActorType>(value, out var actorType))
                {
                    activity.PerformedBy.ActorType = actorType;
                }
                break;
            case "actorid":
                activity.PerformedBy.ActorId = value;
                break;
            case "actorname":
                activity.PerformedBy.ActorName = value;
                break;
            default:
                Console.WriteLine($"PerformedBy field: {performedByField} is not supported (yet)");
                break;
        }
    }
}
        