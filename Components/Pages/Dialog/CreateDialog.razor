@page "/Dialog/Create"
@using System.Text
@using System.Text.Json
@using Altinn.ApiClients.Dialogporten.Features.V1
@using Newtonsoft.Json
@using Refit
@rendermode InteractiveServer
@inject IServiceownerApi ServiceOwnerApi
<h3>Dialog</h3>

@{
}
<form onsubmit="@DebugButton">
    <FieldRecordComp Data="@Data" FieldRecords="@Fields"/>
    <div>
        <button type="submit" class="btn btn-primary">
            Submit
        </button>
        <button class="btn btn-primary" onclick="@(() => DebugButton())">
            Debug
        </button>
    </div>
</form>

@{
    if (_showPopUp)
    {
        if (_response is not null)
        {
            var header = $"{_response.StatusCode} {(int)_response.StatusCode}";
            var message = _response.IsSuccessStatusCode ? _response.Content : _response.Error.Content;
            <PopUpMessage Header="@header" Message="@message" OnClick="@(() => _showPopUp = false)"></PopUpMessage>
        }
    }
}

@code {

    private bool _showPopUp;
    protected override void OnParametersSet()
    {
        var bytes = Encoding.UTF8.GetBytes(_json);
        var utf8Reader = new Utf8JsonReader(bytes);
        var jsonElement = JsonElement.ParseValue(ref utf8Reader);
        Fields ??= FieldParser.ParseFields(jsonElement.GetProperty("properties"));
    }
    private Dictionary<string, object?> Data { get; set; } = new(StringComparer.InvariantCultureIgnoreCase);

    private void ClosePopUp()
    {
        _showPopUp = false;
    }
    private async Task DebugButton()
    {
        Console.WriteLine(Data);
        // var dialog = Mapper.Map<V1ServiceOwnerDialogsCommandsCreate_Dialog>(Data);
        var serializeObject = JsonConvert.SerializeObject(
            Data,
            new JsonSerializerSettings
            {
                NullValueHandling = NullValueHandling.Ignore
            }
        );

        var createDialogCommand = JsonConvert.DeserializeObject<V1ServiceOwnerDialogsCommandsCreate_Dialog>(serializeObject,
            new JsonSerializerSettings
            {
                NullValueHandling = NullValueHandling.Ignore
            }
        );
        // Console.WriteLine(dialog?.Progress);

        Console.WriteLine(createDialogCommand?.Progress);
        if (createDialogCommand == null) return;
        var response = await ServiceOwnerApi.V1ServiceOwnerDialogsCreateDialog(createDialogCommand);
        Console.WriteLine(response.StatusCode);
        _response = response;
        _showPopUp = true;
    }
    private IApiResponse<string>? _response;
    private static IEnumerable<FieldRecord>? Fields { get; set; }
    // private string Json = File.ReadAllText("jsonFiles/V1ServiceOwnerDialogsCreate_Dialog.json");
    private readonly string _json = File.ReadAllText("jsonFiles/schema.json");
}