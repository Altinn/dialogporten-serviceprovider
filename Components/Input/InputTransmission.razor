@using System.Diagnostics.CodeAnalysis
@using Altinn.ApiClients.Dialogporten.Features.V1
@using Digdir.BDB.Dialogporten.ServiceProvider.Components.Input.common
@inherits InputBase<ICollection<V1ServiceOwnerDialogsCommandsCreate_Transmission>>
<fieldset>
    <legend>Transmission</legend>
    <table>
        @foreach (var transmission in Value!)
        {
            <tr>
                <td>
                    <InputGuid @bind-Value="transmission.Id"/>
                    <ValidationMessage For="() => transmission.Id"/>
                </td>

                <td>
                    <InputDate @bind-Value="@transmission.CreatedAt"/>
                    <ValidationMessage For="() => transmission.CreatedAt"/>
                </td>

                <td>
                    <InputText @bind-Value="@transmission.AuthorizationAttribute"/>
                    <ValidationMessage For="() => transmission.AuthorizationAttribute"/>
                </td>

                <td>
                    <InputUri @bind-Value="@transmission.ExtendedType"></InputUri>
                    <ValidationMessage For="() => transmission.ExtendedType"/>
                </td>
                <td>
                    <InputGuid @bind-Value="@transmission.RelatedTransmissionId"/>
                    <ValidationMessage For="() => transmission.RelatedTransmissionId"/>
                </td>
                <td>
                    <InputSelect @bind-Value="@transmission.Type">
                        @foreach (var type in Enum.GetValues<DialogsEntitiesTransmissions_DialogTransmissionType>())
                        {
                            <option value="@type">@type</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="@(() => transmission.Type)"/>
                </td>

                <td>
                    <InputCommonActor @bind-Value="@transmission.Sender"></InputCommonActor>
                    <ValidationMessage For="() => transmission.Sender"/>
                </td>

                <td>
                    <label>Content Title</label>
                    <InputCommonContentValue @bind-Value="@transmission.Content.Title"/>
                    <ValidationMessage For="() => transmission.Content.Title"/>
                </td>

                <td>
                    <label>Content Summary</label>
                    <InputCommonContentValue @bind-Value="@transmission.Content.Summary"/>
                    <ValidationMessage For="() => transmission.Content.Summary"/>
                </td>
               
                <td>
                    <label>Content Reference</label>
                    <InputCommonContentValue @bind-Value="@transmission.Content.ContentReference"/>
                    <ValidationMessage For="() => transmission.Content.ContentReference"/>
                </td>


                <td>
                    @foreach (var attachment in transmission.Attachments)
                    {
                    <td>
                        <InputGuid @bind-Value="@attachment.Id"/>
                    </td>
                    <td>
                        <InputLocalization @bind-Value="@attachment.DisplayName"/>
                    </td>
                    <td>
                        <InputTransmissionAttachmentUrl @bind-Value="@attachment.Urls"/>
                    </td>
                    <button type="button"
                            @onclick="() => RemoveTransmissionAttachment(transmission, attachment)">Remove
                    </button>
                }
                </td>

                <td>
                    <button type="button" @onclick="() => RemoveTransmission(transmission)">Remove</button>
                </td>
            </tr>

            <button type="button" @onclick="() => AddTransmissionAttachment(transmission)">Add Transmission
                Attachment
            </button>
        }
    </table>
    <button type="button" @onclick="AddTransmission">Add Transmission</button>

</fieldset>

@code {
    protected override bool TryParseValueFromString(string? value, [MaybeNullWhen(false)] out ICollection<V1ServiceOwnerDialogsCommandsCreate_Transmission> result, [NotNullWhen(false)] out string? validationErrorMessage) => throw new NotImplementedException();

    private void AddTransmission()
    {
        Value!.Add(new V1ServiceOwnerDialogsCommandsCreate_Transmission
        {
            Id = null,
            CreatedAt = default,
            AuthorizationAttribute = null!,
            ExtendedType = null!,
            RelatedTransmissionId = null,
            Type = DialogsEntitiesTransmissions_DialogTransmissionType.Information,
            Sender = new V1ServiceOwnerCommonActors_Actor(),
            Content = new V1ServiceOwnerDialogsCommandsCreate_TransmissionContent
            {
                Title = new V1CommonContent_ContentValue(),
                Summary = new V1CommonContent_ContentValue(),
                ContentReference = new V1CommonContent_ContentValue()
            },
            Attachments = []
        });
        ValueChanged.InvokeAsync(Value);

    }

    private void RemoveTransmission(V1ServiceOwnerDialogsCommandsCreate_Transmission transmission)
    {
        Value!.Remove(transmission);
        ValueChanged.InvokeAsync(Value);
    }


    private void RemoveTransmissionAttachment(V1ServiceOwnerDialogsCommandsCreate_Transmission transmission, V1ServiceOwnerDialogsCommandsCreate_TransmissionAttachment attachment)
    {
        transmission.Attachments.Remove(attachment);
        ValueChanged.InvokeAsync(Value);

    }

    private void AddTransmissionAttachment(V1ServiceOwnerDialogsCommandsCreate_Transmission transmission)
    {
        transmission.Attachments.Add(new V1ServiceOwnerDialogsCommandsCreate_TransmissionAttachment());
        ValueChanged.InvokeAsync(Value);
    }
}
