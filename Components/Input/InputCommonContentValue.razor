@inherits InputBase<V1CommonContent_ContentValue>
@using System.Diagnostics
@using System.Diagnostics.CodeAnalysis
@using Altinn.ApiClients.Dialogporten.Features.V1
@using Digdir.BDB.Dialogporten.ServiceProvider.Components.Input.common
<fieldset>
    @if (Value is null) throw new UnreachableException();
    <div>
        <label>Media Type:</label>
        <InputText
            AdditionalAttributes="@AdditionalAttributes"
            @bind-Value="Value.MediaType"
            @bind-Value:after="NotifyValueChanged"
        />
        <InputLocalization @bind-Value="@Value.Value"
                           @bind-Value:after="NotifyValueChanged"
        />
        <ValidationMessage For="@(() => Value.Value)"/>
    </div>

</fieldset>

@code {
    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        var isRequired = false;
        if (AdditionalAttributes != null)
        {
            AdditionalAttributes.TryGetValue("required", out var required);
            isRequired = required is true;
        }
        if (Value == null)
        {
             Value = new V1CommonContent_ContentValue
            {
                MediaType = isRequired ? "text/plain" : "",
                Value = []
            };
            if (isRequired)
            {
                NotifyValueChanged();
            }
        }
    }
    protected override bool TryParseValueFromString(string? value, [MaybeNullWhen(false)] out V1CommonContent_ContentValue result, [NotNullWhen(false)] out string? validationErrorMessage)
    {
        result = Value!;
        validationErrorMessage = "";
        return true;
    }


    private void NotifyValueChanged()
    {
        ValueChanged.InvokeAsync(Value);
    }
}